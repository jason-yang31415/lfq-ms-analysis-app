{"version":3,"sources":["AnalysisWorker.js","worker.js","store/actions.js","components/InputDataUpload.js","RunAnalysis.js","components/InputReplicateSelection.js","components/InputComparisonSelection.js","components/InputContainer.js","analysis/MSExperiment.js","analysis/utils.js","Figures.js","components/FigureOptions.js","components/MainPanelContainer.js","components/SidePanelContainer.js","components/App.js","store/store.js","index.js"],"names":["worker","wrap","Worker","ACTIONS","createAction","type","data","connect","dispatch","onDataUpload","file","Response","arrayBuffer","then","ab","transfer","getSamples","samples","htmlFor","id","name","onInput","e","target","files","Modal","setAppElement","state","input","onReplicatesSelect","conditions","Object","keys","React","useState","replicatesModalOpen","setReplicatesModalOpen","selectedReplicates","setSelectedReplicates","conditionName","setConditionName","setConditions","onClick","isOpen","multiple","onChange","Array","from","selectedOptions","map","opt","value","sample","length","assign","entries","condition","replicates","join","onComparisonSelect","comparisons","comparisonsObj","reduce","obj","get","onComparisonsSelect","comparisonModalOpen","setComparisonModalOpen","Map","conditionA","conditionB","selected","has","set","Set","add","delete","onComparisonChange","checked","disabled","InputContainer","className","MSExperiment","this","rawData","snapshots","removeContaminants","bind","logTransform","removeAllNaN","setReplicates","console","log","where","row","subset","COMMON_COLUMNS","bake","SNAPSHOT_KEYS","REMOVE_CONTAMINANTS","transformSeries","Math","log2","NaN","LOG_TRANSFORM","every","isNaN","maxMedian","max","apply","getSeries","Number","median","MEDIAN_NORMALIZATION","clear","series","mean","average","stdev","std","random","uniform","IMPUTE_MISSING_VALUES","rowConditionArray","allConditions","concat","values","conditionMeans","generateSeries","jstat","comparisonData","arr1","arr2","m1","m2","s1","s2","se","sqrt","pow","df","floor","t","p","studentt","cdf","abs","ttest","FIGURES","PRE_POST_IMPUTATION_VIOLIN","PRE_POST_IMPUTATION_BOXPLOT","VOLCANO","P_VALUE_HISTOGRAM","makePlotlyDataLayout","options","a","ret","layout","makePrePostImputationViolin","makePrePostImputationBoxplot","makeVolcanoPlot","makePValueHistogram","autosize","makeViolinTrace","trace","width","points","undefined","Promise","all","getData","x","y0","legendgroup","side","getReplicates","array","flat","title","yaxis","automargin","makeBoxplotTrace","y","x0","xaxis","boxmode","boxgap","boxgroupgap","getComparisonData","logfc","pvalues","genes","mode","log10","hovertext","start","end","size","xbins","figureType","onOptionsChange","sampleCondition","setSampleCondition","onFigureTypeChange","currentTarget","JSON","parse","stringify","figureOptions","setFigureOptions","plot","setPlot","onShowPlotClick","defaultValue","fig","useResizeHandler","SidePanelContainer","App","initialState","main","inputReducer","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","cpy","applyMiddleware","thunk","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.c8db89ea.chunk.js","sourcesContent":["/* eslint-disable import/no-webpack-loader-syntax */\nimport Worker from \"worker-loader!./worker.js\";\nimport { wrap } from \"comlink\";\n\n// instantiate worker for analysis\nconst worker = wrap(new Worker());\nexport default worker;\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/worker.a2fe456f.worker.js\");\n}\n","export const ACTIONS = {\n    SET_INPUT_SAMPLES: \"SET_INPUT_SAMPLES\",\n    SET_INPUT_CONDITIONS: \"SET_INPUT_CONDITIONS\",\n    SET_INPUT_COMPARISONS: \"SET_INPUT_COMPARISONS\",\n};\n\nexport function createAction(type, data) {\n    return {\n        type,\n        data,\n    };\n}\n","import { connect } from \"react-redux\";\nimport { onDataUpload } from \"../RunAnalysis\";\n\nfunction InputDataUpload({ onDataUpload }) {\n    return (\n        <div>\n            <label htmlFor=\"dataUpload\">Upload data: </label>\n            <input\n                type=\"file\"\n                id=\"dataUpload\"\n                name=\"dataUpload\"\n                onInput={(e) => onDataUpload(e.target.files[0])}\n            />\n        </div>\n    );\n}\n\nexport default connect(null, (dispatch) => {\n    return {\n        onDataUpload: (file) => {\n            dispatch(onDataUpload(file));\n        },\n    };\n})(InputDataUpload);\n","import worker from \"./AnalysisWorker\";\nimport { transfer } from \"comlink\";\nimport { ACTIONS, createAction } from \"./store/actions\";\n\n/**\n * This file interfaces between UI and analysis. UI changes are handled on the\n * main thread (this file) while analysis is handled in a worker (see\n * worker.js); each function calls the equivalent function in the worker, via\n * comlink proxy, to handle the analysis aspect off of the main thread.\n */\n\nexport function onDataUpload(file) {\n    return (dispatch) => {\n        new Response(file)\n            // wrap file blob in response to read data as array buffer\n            .arrayBuffer()\n            // transfer array buffer to worker for processing and analysis\n            .then((ab) => {\n                return worker.onDataUpload(transfer(ab, [ab]));\n            })\n            // retrieve sample names\n            .then(() => {\n                return worker.getSamples();\n            })\n            // update UI with sample names\n            .then((samples) => {\n                dispatch(createAction(ACTIONS.SET_INPUT_SAMPLES, samples));\n            });\n    };\n}\n\nexport function onReplicatesSelect(conditions) {\n    return (dispatch) => {\n        // transfer conditions object to worker for processing\n        worker.onReplicatesSelect(conditions).then(() => {\n            // update UI with condition names\n            dispatch(\n                createAction(\n                    ACTIONS.SET_INPUT_CONDITIONS,\n                    Object.keys(conditions)\n                )\n            );\n        });\n    };\n}\n\nexport function onComparisonsSelect(comparisons) {\n    return (dispatch) => {\n        // transfer comparisons object to worker for processing\n        worker.onComparisonsSelect(comparisons);\n        dispatch(createAction(ACTIONS.SET_INPUT_COMPARISONS, comparisons));\n    };\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Modal from \"react-modal\";\n\nimport \"./InputReplicateSelection.css\";\nimport { onReplicatesSelect } from \"../RunAnalysis\";\n\nModal.setAppElement(\"#root\");\n\nfunction InputReplicateSelection({ samples, onReplicatesSelect }) {\n    const [replicatesModalOpen, setReplicatesModalOpen] = React.useState(false);\n    const [selectedReplicates, setSelectedReplicates] = React.useState([]);\n    const [conditionName, setConditionName] = React.useState(\"\");\n    const [conditions, setConditions] = React.useState({});\n\n    const onAddCondition = () => {\n        if (conditionName.length === 0) return;\n        setConditions(\n            Object.assign({}, conditions, {\n                [conditionName]: selectedReplicates,\n            })\n        );\n        setConditionName(\"\");\n    };\n\n    const onOKClick = () => {\n        onReplicatesSelect(conditions);\n        setReplicatesModalOpen(false);\n    };\n\n    return (\n        <div>\n            <button onClick={() => setReplicatesModalOpen(true)}>\n                Select replicates\n            </button>\n            <Modal isOpen={replicatesModalOpen} id=\"input-replicate-modal\">\n                <h1 id=\"input-replicate-modal-head\">Select replicates</h1>\n\n                <select\n                    multiple\n                    onChange={(e) => {\n                        setSelectedReplicates(\n                            Array.from(e.target.selectedOptions).map(\n                                (opt) => opt.value\n                            )\n                        );\n                    }}\n                >\n                    {samples.map((sample) => (\n                        <option value={sample} key={sample}>\n                            {sample}\n                        </option>\n                    ))}\n                </select>\n\n                <div>\n                    <label htmlFor=\"conditionName\">Condition name: </label>\n                    <input\n                        type=\"text\"\n                        id=\"conditionName\"\n                        name=\"conditionName\"\n                        value={conditionName}\n                        onChange={(e) => setConditionName(e.target.value)}\n                    />\n                    <br />\n                    <button onClick={onAddCondition}>Add condition</button>\n                    <br />\n                    <button onClick={() => setConditions({})}>\n                        Reset conditions\n                    </button>\n                </div>\n\n                <div>\n                    {Object.entries(conditions).map(\n                        ([condition, replicates]) => (\n                            <p key={condition}>\n                                {condition}: {replicates.join(\", \")}\n                            </p>\n                        )\n                    )}\n                </div>\n\n                <div id=\"input-replicate-modal-foot\">\n                    <button onClick={onOKClick}>OK</button>\n                </div>\n            </Modal>\n        </div>\n    );\n}\n\nexport default connect(\n    (state) => {\n        return {\n            samples: state.input.samples,\n        };\n    },\n    (dispatch) => {\n        return {\n            onReplicatesSelect: (conditions) => {\n                dispatch(onReplicatesSelect(conditions));\n            },\n        };\n    }\n)(InputReplicateSelection);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Modal from \"react-modal\";\n\nimport \"./InputComparisonSelection.css\";\nimport { onComparisonsSelect } from \"../RunAnalysis\";\n\nModal.setAppElement(\"#root\");\n\nfunction InputComparisonSelection({ conditions, onComparisonSelect }) {\n    const [comparisonModalOpen, setComparisonModalOpen] = React.useState(false);\n    /** @type {Map.<string, Set<string>} */\n    const comparisons = new Map();\n\n    const onComparisonChange = (conditionA, conditionB, selected) => {\n        if (selected) {\n            if (!comparisons.has(conditionA))\n                comparisons.set(conditionA, new Set());\n            comparisons.get(conditionA).add(conditionB);\n        } else {\n            if (\n                comparisons.has(conditionA) &&\n                comparisons.get(conditionA).has(conditionB)\n            )\n                comparisons.get(conditionA).delete(conditionB);\n        }\n    };\n\n    const onOKClick = () => {\n        onComparisonSelect(comparisons);\n        setComparisonModalOpen(false);\n    };\n\n    return (\n        <div>\n            <button onClick={() => setComparisonModalOpen(true)}>\n                Select comparisons\n            </button>\n            <Modal isOpen={comparisonModalOpen} id=\"input-comparison-modal\">\n                <h1 id=\"input-comparison-modal-head\">Select comparisons</h1>\n\n                <table>\n                    <tbody>\n                        <tr>\n                            <td></td>\n                            {conditions.map((condition) => (\n                                <td key={`${condition} B`}>{condition}</td>\n                            ))}\n                        </tr>\n                        {conditions.map((conditionA) => (\n                            <tr key={`${conditionA} row`}>\n                                <td key={`${conditionA} A`}>{conditionA}</td>\n                                {conditions.map((conditionB) => (\n                                    <td key={`${conditionA},${conditionB}`}>\n                                        <input\n                                            type=\"checkbox\"\n                                            onChange={(e) =>\n                                                onComparisonChange(\n                                                    conditionA,\n                                                    conditionB,\n                                                    e.target.checked\n                                                )\n                                            }\n                                            disabled={conditionA === conditionB}\n                                        />\n                                    </td>\n                                ))}\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n\n                <div id=\"input-comparison-modal-foot\">\n                    <button onClick={onOKClick}>OK</button>\n                </div>\n            </Modal>\n        </div>\n    );\n}\n\nexport default connect(\n    (state) => {\n        return {\n            conditions: state.input.conditions,\n        };\n    },\n    (dispatch) => {\n        return {\n            onComparisonSelect: (comparisons) => {\n                const comparisonsObj = Array.from(comparisons.keys()).reduce(\n                    (obj, condition) =>\n                        Object.assign(obj, {\n                            [condition]: Array.from(comparisons.get(condition)),\n                        }),\n                    {}\n                );\n                dispatch(onComparisonsSelect(comparisonsObj));\n            },\n        };\n    }\n)(InputComparisonSelection);\n","import \"./InputContainer.css\";\nimport InputDataUpload from \"./InputDataUpload\";\nimport InputReplicateSelection from \"./InputReplicateSelection\";\nimport InputComparisonSelection from \"./InputComparisonSelection\";\n\nfunction InputContainer({ id }) {\n    return (\n        <div id={id} className=\"input-container\">\n            <InputDataUpload />\n            <InputReplicateSelection />\n            <InputComparisonSelection />\n        </div>\n    );\n}\n\nexport default InputContainer;\n","import { DataFrame, Series } from \"data-forge\";\nimport random from \"random\";\nimport jstat from \"jstat\";\nimport { ttest } from \"./utils\";\n\nclass MSExperiment {\n    /**\n     *\n     * @param {DataFrame} data\n     * @param {string[]} samples\n     */\n    constructor(data, samples) {\n        this.data = data;\n        this.rawData = data;\n        this.samples = samples;\n\n        /** @type {Map<string, DataFrame} */\n        this.snapshots = new Map();\n\n        /** @type {Map<string, string[]>} */\n        this.replicates = new Map();\n\n        /** @type {Map<string, Map<string, DataFrame>>} */\n        this.comparisons = new Map();\n\n        this.removeContaminants = this.removeContaminants.bind(this);\n        this.logTransform = this.logTransform.bind(this);\n        this.removeAllNaN = this.removeAllNaN.bind(this);\n        this.setReplicates = this.setReplicates.bind(this);\n    }\n\n    static SNAPSHOT_KEYS = {\n        REMOVE_CONTAMINANTS: \"REMOVE_CONTAMINANTS\",\n        LOG_TRANSFORM: \"LOG_TRANSFORM\",\n        MEDIAN_NORMALIZATION: \"MEDIAN_NORMALIZATION\",\n        IMPUTE_MISSING_VALUES: \"IMPUTE_MISSING_VALUES\",\n    };\n\n    static COMMON_COLUMNS = [\"id\", \"uniprotID\", \"gene\"];\n\n    /**\n     * Modifies `data` to remove entries with True for \"Potential contaminant\"\n     * or \"Reverse\"\n     */\n    removeContaminants() {\n        console.log(\"removing contaminants\");\n        this.data = this.data\n            // filter by \"Potential contaminant\" and \"Reverse\"\n            .where((row) => !row[\"Potential contaminant\"] && !row[\"Reverse\"])\n            // keep only \"uniprotID\" and \"LFQ intensity ...\" columns\n            .subset([\n                ...MSExperiment.COMMON_COLUMNS,\n                ...this.samples.map((sample) => `LFQ intensity ${sample}`),\n            ])\n            .bake();\n\n        this.snapshots.set(\n            MSExperiment.SNAPSHOT_KEYS.REMOVE_CONTAMINANTS,\n            this.data\n        );\n    }\n\n    /**\n     * Modifies `data` with log2\n     */\n    logTransform() {\n        console.log(\"log transforming\");\n        for (const sample of this.samples) {\n            this.data = this.data\n                // transform column by taking log2 or setting to NaN\n                .transformSeries({\n                    [`LFQ intensity ${sample}`]: (value) =>\n                        value > 0 ? Math.log2(value) : NaN,\n                })\n                .bake();\n        }\n\n        this.snapshots.set(MSExperiment.SNAPSHOT_KEYS.LOG_TRANSFORM, this.data);\n    }\n\n    /**\n     * Modifies `data` to remove entries with NaN in all samples (i.e.\n     * intensity of 0 in all samples)\n     */\n    removeAllNaN() {\n        console.log(\"removing all NaN\");\n        this.data = this.data\n            // only keep rows where not every sample is NaN\n            .where(\n                (row) =>\n                    !this.samples.every((sample) =>\n                        isNaN(row[`LFQ intensity ${sample}`])\n                    )\n            )\n            .bake();\n    }\n\n    /**\n     * Modifies `data` such that each sample is scaled to have the same median\n     * value, equal to the highest median pre-scaling.\n     */\n    normalizeMedians() {\n        console.log(\"normalizing medians\");\n        const maxMedian = Math.max.apply(\n            null,\n            this.samples.map((sample) =>\n                this.data\n                    .getSeries(`LFQ intensity ${sample}`)\n                    .where((value) => !Number.isNaN(value))\n                    .median()\n            )\n        );\n\n        for (const sample of this.samples) {\n            const median = this.data\n                .getSeries(`LFQ intensity ${sample}`)\n                .where((value) => !Number.isNaN(value))\n                .median();\n            this.data = this.data\n                .transformSeries({\n                    [`LFQ intensity ${sample}`]: (value) =>\n                        (value * maxMedian) / median,\n                })\n                .bake();\n        }\n\n        this.snapshots.set(\n            MSExperiment.SNAPSHOT_KEYS.MEDIAN_NORMALIZATION,\n            this.data\n        );\n    }\n\n    /**\n     * Modifies `replicates` to store group replicate samples into conditions\n     * @param {Object.<string, string[]>} replicates object containing\n     * replicate data, where keys are condition names and values are arrays of\n     * sample names\n     */\n    setReplicates(replicates) {\n        this.replicates.clear();\n        for (const [condition, samples] of Object.entries(replicates))\n            this.replicates.set(condition, samples);\n    }\n\n    /**\n     * Modifies `data` to replace NA's (intensity of 0) with imputed values.\n     * Imputed values are drawn from a uniform distribution of log2 intensities\n     * ranging from -3 * sigma to -2 * sigma among non-NA log2 intensity\n     * values within the same sample.\n     */\n    imputeMissingValues() {\n        console.log(\"imputing missing values\");\n        for (const sample of this.samples) {\n            const series = this.data\n                .getSeries(`LFQ intensity ${sample}`)\n                .where((value) => !Number.isNaN(value))\n                .bake();\n            const mean = series.average();\n            const stdev = series.std();\n\n            this.data = this.data\n                .transformSeries({\n                    [`LFQ intensity ${sample}`]: (value) =>\n                        Number.isNaN(value)\n                            ? random.uniform(\n                                  mean - 3 * stdev,\n                                  mean - 2 * stdev\n                              )()\n                            : value,\n                })\n                .bake();\n        }\n\n        this.snapshots.set(\n            MSExperiment.SNAPSHOT_KEYS.IMPUTE_MISSING_VALUES,\n            this.data\n        );\n    }\n\n    /**\n     * Makes specified comparisons and stores results in `comparisons.\n     * @param {Object.<string, string[]>} comparisons object containing\n     * comparisons to make, with condition A as key and condition B in values\n     * array\n     */\n    makeComparisons(comparisons) {\n        const rowConditionArray = (row, condition) =>\n            this.replicates\n                .get(condition)\n                .map((sample) => row[`LFQ intensity ${sample}`]);\n\n        const allConditions = Array.from(\n            new Set(\n                Object.keys(comparisons).concat(...Object.values(comparisons))\n            )\n        );\n        const conditionMeans = this.data.generateSeries(\n            allConditions.reduce(\n                (obj, condition) =>\n                    Object.assign(obj, {\n                        [`mean ${condition}`]: (row) =>\n                            jstat(rowConditionArray(row, condition)).mean(),\n                    }),\n                {}\n            )\n        );\n\n        for (const [conditionA, value] of Object.entries(comparisons)) {\n            if (!this.comparisons.has(conditionA))\n                this.comparisons.set(conditionA, new Map());\n\n            for (const conditionB of value) {\n                const comparisonData = conditionMeans\n                    .generateSeries({\n                        \"log FC\": (row) =>\n                            row[`mean ${conditionB}`] -\n                            row[`mean ${conditionA}`],\n                        \"p value\": (row) =>\n                            ttest(\n                                rowConditionArray(row, conditionB),\n                                rowConditionArray(row, conditionA)\n                            ).p,\n                    })\n                    .subset([\n                        ...MSExperiment.COMMON_COLUMNS,\n                        `mean ${conditionA}`,\n                        `mean ${conditionB}`,\n                        \"log FC\",\n                        \"p value\",\n                    ])\n                    .bake();\n                this.comparisons\n                    .get(conditionA)\n                    .set(conditionB, comparisonData);\n            }\n        }\n    }\n}\n\nexport default MSExperiment;\n","import jstat from \"jstat\";\n\n/**\n * Calculates two-sample Welch's t-test (two tail).\n * @param {number[]} arr1 sample 1\n * @param {number[]} arr2 sample 2\n */\nexport function ttest(arr1, arr2) {\n    const m1 = jstat(arr1).mean();\n    const m2 = jstat(arr2).mean();\n    const s1 = jstat(arr1).stdev(true);\n    const s2 = jstat(arr2).stdev(true);\n    const se = Math.sqrt(\n        Math.pow(s1, 2) / arr1.length + Math.pow(s2, 2) / arr2.length\n    );\n    const df = Math.floor(\n        Math.pow(\n            Math.pow(s1, 2) / arr1.length + Math.pow(s2, 2) / arr2.length,\n            2\n        ) /\n            (Math.pow(s1, 4) / (Math.pow(arr1.length, 2) * (arr1.length - 1)) +\n                Math.pow(s2, 4) /\n                    (Math.pow(arr2.length, 2) * (arr2.length - 1)))\n    );\n    const t = (m2 - m1) / se;\n    const p = 2 * jstat.studentt.cdf(-Math.abs(t), df);\n    return { t, p, df };\n}\n","import worker from \"./AnalysisWorker\";\nimport MSExperiment from \"./analysis/MSExperiment\";\n\nexport const FIGURES = {\n    PRE_POST_IMPUTATION_VIOLIN: \"PRE_POST_IMPUTATION_VIOLIN\",\n    PRE_POST_IMPUTATION_BOXPLOT: \"PRE_POST_IMPUTATION_BOXPLOT\",\n    VOLCANO: \"VOLCANO\",\n    P_VALUE_HISTOGRAM: \"P_VALUE_HISTOGRAM\",\n};\n\nexport async function makePlotlyDataLayout(options) {\n    const { type } = options;\n\n    let ret = { data: [], layout: {} };\n    switch (type) {\n        case FIGURES.PRE_POST_IMPUTATION_VIOLIN:\n            ret = await makePrePostImputationViolin(options);\n            break;\n        case FIGURES.PRE_POST_IMPUTATION_BOXPLOT:\n            ret = await makePrePostImputationBoxplot(options);\n            break;\n        case FIGURES.VOLCANO:\n            ret = await makeVolcanoPlot(options);\n            break;\n        case FIGURES.P_VALUE_HISTOGRAM:\n            ret = await makePValueHistogram(options);\n            break;\n    }\n    ret.layout.autosize = true;\n\n    return ret;\n}\n\nasync function makePrePostImputationViolin({ samples, conditions }) {\n    const makeViolinTrace = (trace) => {\n        return Object.assign(trace, {\n            type: \"violin\",\n            width: 1,\n            points: false,\n        });\n    };\n\n    let ret = { data: [], layout: {} };\n    if (samples != undefined && conditions == undefined) {\n        ret = {\n            data: await Promise.all([\n                ...samples.map((sample) =>\n                    worker\n                        .getData(\n                            `LFQ intensity ${sample}`,\n                            MSExperiment.SNAPSHOT_KEYS.MEDIAN_NORMALIZATION\n                        )\n                        .then((data) =>\n                            makeViolinTrace({\n                                name: \"pre\",\n                                x: data,\n                                y0: sample,\n                                legendgroup: \"pre\",\n                                side: \"positive\",\n                            })\n                        )\n                ),\n                ...samples.map((sample) =>\n                    worker\n                        .getData(\n                            `LFQ intensity ${sample}`,\n                            MSExperiment.SNAPSHOT_KEYS.IMPUTE_MISSING_VALUES\n                        )\n                        .then((data) =>\n                            makeViolinTrace({\n                                name: \"post\",\n                                x: data,\n                                y0: sample,\n                                legendgroup: \"post\",\n                                side: \"negative\",\n                            })\n                        )\n                ),\n            ]),\n            layout: {},\n        };\n    } else if (samples == undefined && conditions != undefined) {\n        const replicates = await worker.getReplicates();\n        ret = {\n            data: await Promise.all([\n                ...conditions.map((condition) =>\n                    Promise.all(\n                        replicates\n                            .get(condition)\n                            .map((sample) =>\n                                worker.getData(\n                                    `LFQ intensity ${sample}`,\n                                    MSExperiment.SNAPSHOT_KEYS\n                                        .MEDIAN_NORMALIZATION\n                                )\n                            )\n                    )\n                        .then((array) => array.flat())\n                        .then((data) =>\n                            makeViolinTrace({\n                                name: \"pre\",\n                                x: data,\n                                y0: condition,\n                                legendgroup: \"pre\",\n                                side: \"positive\",\n                            })\n                        )\n                ),\n                ...conditions.map((condition) =>\n                    Promise.all(\n                        replicates\n                            .get(condition)\n                            .map((sample) =>\n                                worker.getData(\n                                    `LFQ intensity ${sample}`,\n                                    MSExperiment.SNAPSHOT_KEYS\n                                        .IMPUTE_MISSING_VALUES\n                                )\n                            )\n                    )\n                        .then((array) => array.flat())\n                        .then((data) =>\n                            makeViolinTrace({\n                                name: \"post\",\n                                x: data,\n                                y0: condition,\n                                legendgroup: \"post\",\n                                side: \"negative\",\n                            })\n                        )\n                ),\n            ]),\n            layout: {},\n        };\n    }\n\n    Object.assign(ret.layout, {\n        title: \"log2 intensities pre- and post-imputation\",\n        yaxis: {\n            automargin: true,\n        },\n    });\n    return ret;\n}\n\nasync function makePrePostImputationBoxplot({ samples, conditions }) {\n    const makeBoxplotTrace = (trace) => {\n        return Object.assign(trace, {\n            type: \"box\",\n        });\n    };\n\n    let ret = { data: [], layout: {} };\n    if (samples != undefined && conditions == undefined) {\n        ret = {\n            data: await Promise.all([\n                ...samples.map((sample) =>\n                    worker\n                        .getData(\n                            `LFQ intensity ${sample}`,\n                            MSExperiment.SNAPSHOT_KEYS.MEDIAN_NORMALIZATION\n                        )\n                        .then((data) =>\n                            makeBoxplotTrace({\n                                name: \"pre\",\n                                y: data,\n                                x0: sample,\n                                legendgroup: \"pre\",\n                            })\n                        )\n                ),\n                ...samples.map((sample) =>\n                    worker\n                        .getData(\n                            `LFQ intensity ${sample}`,\n                            MSExperiment.SNAPSHOT_KEYS.IMPUTE_MISSING_VALUES\n                        )\n                        .then((data) =>\n                            makeBoxplotTrace({\n                                name: \"post\",\n                                y: data,\n                                x0: sample,\n                                legendgroup: \"post\",\n                            })\n                        )\n                ),\n            ]),\n            layout: {},\n        };\n    } else if (samples == undefined && conditions != undefined) {\n        const replicates = await worker.getReplicates();\n        ret = {\n            data: await Promise.all([\n                ...conditions.map((condition) =>\n                    Promise.all(\n                        replicates\n                            .get(condition)\n                            .map((sample) =>\n                                worker.getData(\n                                    `LFQ intensity ${sample}`,\n                                    MSExperiment.SNAPSHOT_KEYS\n                                        .MEDIAN_NORMALIZATION\n                                )\n                            )\n                    )\n                        .then((array) => array.flat())\n                        .then((data) =>\n                            makeBoxplotTrace({\n                                name: \"pre\",\n                                y: data,\n                                x0: condition,\n                                legendgroup: \"pre\",\n                            })\n                        )\n                ),\n                ...conditions.map((condition) =>\n                    Promise.all(\n                        replicates\n                            .get(condition)\n                            .map((sample) =>\n                                worker.getData(\n                                    `LFQ intensity ${sample}`,\n                                    MSExperiment.SNAPSHOT_KEYS\n                                        .IMPUTE_MISSING_VALUES\n                                )\n                            )\n                    )\n                        .then((array) => array.flat())\n                        .then((data) =>\n                            makeBoxplotTrace({\n                                name: \"post\",\n                                y: data,\n                                x0: condition,\n                                legendgroup: \"post\",\n                            })\n                        )\n                ),\n            ]),\n            layout: {},\n        };\n    }\n\n    Object.assign(ret.layout, {\n        title: \"log2 intensities pre- and post-imputation\",\n        xaxis: {\n            automargin: true,\n        },\n        boxmode: \"group\",\n        boxgap: -1,\n        boxgroupgap: 0,\n    });\n    return ret;\n}\n\nasync function makeVolcanoPlot({ comparisons }) {\n    if (!comparisons) return { data: [], layout: {} };\n    return {\n        data: [\n            await Promise.all([\n                worker.getComparisonData(comparisons, \"log FC\"),\n                worker.getComparisonData(comparisons, \"p value\"),\n                worker.getComparisonData(comparisons, \"gene\"),\n            ]).then(([logfc, pvalues, genes]) => {\n                return {\n                    type: \"scattergl\",\n                    mode: \"markers\",\n                    x: logfc,\n                    y: pvalues.map((p) => -1 * Math.log10(p)),\n                    hovertext: genes,\n                };\n            }),\n        ],\n        layout: {\n            title: `${comparisons[1]} vs. ${comparisons[0]}`,\n        },\n    };\n}\n\nasync function makePValueHistogram({ comparisons }) {\n    if (!comparisons) return { data: [], layout: {} };\n    return {\n        data: [\n            {\n                type: \"histogram\",\n                x: await worker.getComparisonData(comparisons, \"p value\"),\n                xbins: {\n                    start: 0,\n                    end: 1,\n                    size: 0.025,\n                },\n            },\n        ],\n        layout: {\n            title: `${comparisons[1]} vs. ${comparisons[0]} p values`,\n        },\n    };\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FIGURES } from \"../Figures\";\n\nimport \"./FigureOptions.css\";\n\nfunction FigureOptions({\n    samples,\n    conditions,\n    comparisons,\n    figureType,\n    onOptionsChange,\n}) {\n    console.log(comparisons);\n    const [sampleCondition, setSampleCondition] = React.useState(\"samples\");\n\n    let options;\n    switch (figureType) {\n        case FIGURES.PRE_POST_IMPUTATION_VIOLIN:\n        case FIGURES.PRE_POST_IMPUTATION_BOXPLOT:\n            const onFigureTypeChange = (e) => {\n                setSampleCondition(e.currentTarget.value);\n            };\n\n            options = (\n                <>\n                    <div>\n                        <input\n                            type=\"radio\"\n                            id=\"figureTypeSamples\"\n                            name=\"figureType\"\n                            value=\"samples\"\n                            checked={sampleCondition === \"samples\"}\n                            onChange={onFigureTypeChange}\n                        />\n                        <label htmlFor=\"figureTypeSamples\">Samples</label>\n                        <br />\n                        <input\n                            type=\"radio\"\n                            id=\"figureTypeConditions\"\n                            name=\"figureType\"\n                            value=\"conditions\"\n                            checked={sampleCondition === \"conditions\"}\n                            onChange={onFigureTypeChange}\n                        />\n                        <label htmlFor=\"figureTypeConditions\">Conditions</label>\n                    </div>\n                    <select\n                        multiple\n                        onChange={(e) => {\n                            onOptionsChange({\n                                [sampleCondition]: Array.from(\n                                    e.target.selectedOptions\n                                ).map((opt) => opt.value),\n                            });\n                        }}\n                    >\n                        {{ samples, conditions }[sampleCondition].map(\n                            (name) => (\n                                <option value={name} key={name}>\n                                    {name}\n                                </option>\n                            )\n                        )}\n                    </select>\n                </>\n            );\n            break;\n        case FIGURES.VOLCANO:\n        case FIGURES.P_VALUE_HISTOGRAM:\n            options = (\n                <select\n                    multiple\n                    onChange={(e) => {\n                        onOptionsChange({\n                            comparisons: JSON.parse(e.target.value),\n                        });\n                    }}\n                >\n                    {Object.entries(comparisons || {})\n                        .map(([conditionA, value]) =>\n                            value.map((conditionB) => (\n                                <option\n                                    value={JSON.stringify([\n                                        conditionA,\n                                        conditionB,\n                                    ])}\n                                    key={JSON.stringify([\n                                        conditionA,\n                                        conditionB,\n                                    ])}\n                                >\n                                    {conditionB} vs. {conditionA}\n                                </option>\n                            ))\n                        )\n                        .flat()}\n                </select>\n            );\n            break;\n    }\n\n    return <div className=\"figure-sample-condition-selector\">{options}</div>;\n}\n\nexport default connect((state) => {\n    return {\n        samples: state.input.samples,\n        conditions: state.input.conditions,\n        comparisons: state.input.comparisons,\n    };\n}, null)(FigureOptions);\n","import React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport { connect } from \"react-redux\";\nimport { FIGURES, makePlotlyDataLayout } from \"../Figures\";\nimport FigureOptions from \"./FigureOptions\";\n\nimport \"./MainPanelContainer.css\";\n\nfunction MainPanelContainer({ id, samples }) {\n    const [figureOptions, setFigureOptions] = React.useState({});\n    const [plot, setPlot] = React.useState({\n        data: [],\n        layout: {\n            autosize: true,\n        },\n    });\n\n    const onShowPlotClick = async () => {\n        setPlot(await makePlotlyDataLayout(figureOptions));\n    };\n\n    return (\n        <div id={id} className=\"main-container\">\n            <div className=\"main-figure-options\">\n                {/* select figure type */}\n                <select\n                    onChange={(e) => {\n                        setFigureOptions(\n                            Object.assign({}, figureOptions, {\n                                type: e.target.value,\n                            })\n                        );\n                        console.log(e.target.value);\n                    }}\n                    defaultValue=\"default\"\n                >\n                    {[\n                        <option disabled value=\"default\" key=\"default\">\n                            -- select an option --\n                        </option>,\n                        ...Object.keys(FIGURES).map((fig) => (\n                            <option value={fig} key={fig}>\n                                {fig}\n                            </option>\n                        )),\n                    ]}\n                </select>\n\n                {/* select figure options */}\n                <FigureOptions\n                    figureType={figureOptions.type}\n                    onOptionsChange={({ samples, conditions, comparisons }) =>\n                        setFigureOptions(\n                            Object.assign({}, figureOptions, {\n                                samples,\n                                conditions,\n                                comparisons,\n                            })\n                        )\n                    }\n                />\n\n                {/* show plot */}\n                <button onClick={onShowPlotClick}>Show plot</button>\n            </div>\n            <Plot\n                className=\"main-plot\"\n                data={plot.data}\n                layout={plot.layout}\n                useResizeHandler={true}\n            />\n        </div>\n    );\n}\n\nexport default connect((state) => {\n    return {\n        samples: state.input.samples,\n    };\n}, null)(MainPanelContainer);\n","function SidePanelContainer({ id }) {\n    return <div id={id}></div>;\n}\n\nexport default SidePanelContainer;\n","import \"./App.css\";\nimport InputContainer from \"./InputContainer\";\nimport MainPanelContainer from \"./MainPanelContainer\";\nimport SidePanelContainer from \"./SidePanelContainer\";\n\nfunction App() {\n    return (\n        <div id=\"app-container\">\n            <InputContainer id=\"input-container\" />\n            <SidePanelContainer id=\"sidepanel-container\" />\n            <MainPanelContainer id=\"mainpanel-container\" />\n        </div>\n    );\n}\n\nexport default App;\n","import { applyMiddleware, createStore, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { ACTIONS } from \"./actions\";\n\nconst initialState = {\n    input: {\n        samples: [],\n        conditions: [],\n    },\n    side: {},\n    main: {},\n};\n\nfunction inputReducer(state, action) {\n    switch (action.type) {\n        case ACTIONS.SET_INPUT_SAMPLES:\n            return Object.assign({}, state, {\n                samples: action.data,\n            });\n        case ACTIONS.SET_INPUT_CONDITIONS:\n            return Object.assign({}, state, {\n                conditions: action.data,\n            });\n        case ACTIONS.SET_INPUT_COMPARISONS:\n            return Object.assign({}, state, {\n                comparisons: action.data,\n            });\n    }\n    return state;\n}\n\nfunction rootReducer(state = initialState, action) {\n    const cpy = { ...state };\n    switch (action.type) {\n        case ACTIONS.SET_INPUT_SAMPLES:\n        case ACTIONS.SET_INPUT_CONDITIONS:\n        case ACTIONS.SET_INPUT_COMPARISONS:\n            cpy.input = inputReducer(state.input, action);\n            break;\n    }\n    return cpy;\n}\n\nconst composeEnhancers =\n    (typeof window !== \"undefined\" &&\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n    compose;\n\nexport default createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(thunk))\n);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport store from \"./store/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n"],"sourceRoot":""}
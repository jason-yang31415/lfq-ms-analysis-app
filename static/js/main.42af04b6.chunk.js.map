{"version":3,"sources":["analysis/MSExperiment.js","analysis/CurrentExperiment.js","analysis/index.js","analysis/DataPreparation.js","store/actions.js","RunAnalysis.js","components/InputDataUpload.js","components/InputReplicateSelection.js","components/InputContainer.js","Figures.js","components/FigureSampleConditionSelector.js","components/MainPanelContainer.js","components/SidePanelContainer.js","components/App.js","store/store.js","index.js"],"names":["MSExperiment","data","samples","this","rawData","snapshots","Map","replicates","removeContaminants","bind","logTransform","removeAllNaN","setReplicates","console","log","where","row","subset","map","sample","bake","set","SNAPSHOT_KEYS","REMOVE_CONTAMINANTS","transformSeries","value","Math","log2","NaN","LOG_TRANSFORM","every","isNaN","clear","Object","entries","condition","series","getSeries","Number","mean","average","stdev","std","random","uniform","IMPUTE_MISSING_VALUES","currentExperiment","setCurrentExperiment","experiment","getCurrentExperiment","file","a","Response","text","tsvString","fromCSV","setIndex","generateSeries","uniprotID","split","Reverse","getColumns","col","name","startsWith","select","toArray","ACTIONS","createAction","type","onDataUpload","dispatch","readMaxQuant","then","imputeMissingValues","connect","htmlFor","id","onInput","e","target","files","Modal","setAppElement","state","input","onReplicatesSelect","conditions","keys","React","useState","replicatesModalOpen","setReplicatesModalOpen","selectedReplicates","setSelectedReplicates","conditionName","setConditionName","setConditions","onClick","isOpen","multiple","onChange","Array","from","selectedOptions","opt","length","assign","join","InputContainer","className","FIGURES","PRE_POST_IMPUTATION_VIOLIN","makePlotlyDataLayout","options","ret","layout","makeViolinTrace","trace","width","points","jitter","undefined","x","get","y0","legendgroup","side","pointpos","flat","title","yaxis","automargin","makePrePostImputationViolin","autosize","onSampleConditionChange","figureType","setFigureType","onFigureTypeChange","currentTarget","checked","figureOptions","setFigureOptions","plot","setPlot","defaultValue","disabled","fig","useResizeHandler","SidePanelContainer","App","initialState","main","inputReducer","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","cpy","applyMiddleware","thunk","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.42af04b6.chunk.js","sourcesContent":["import { DataFrame } from \"data-forge\";\nimport random from \"random\";\n\nclass MSExperiment {\n    /**\n     *\n     * @param {DataFrame} data\n     * @param {string[]} samples\n     */\n    constructor(data, samples) {\n        this.data = data;\n        this.rawData = data;\n        this.samples = samples;\n\n        /** @type {Map<string, DataFrame} */\n        this.snapshots = new Map();\n\n        /** @type {Map<string, string[]>} */\n        this.replicates = new Map();\n\n        this.removeContaminants = this.removeContaminants.bind(this);\n        this.logTransform = this.logTransform.bind(this);\n        this.removeAllNaN = this.removeAllNaN.bind(this);\n        this.setReplicates = this.setReplicates.bind(this);\n    }\n\n    static SNAPSHOT_KEYS = {\n        REMOVE_CONTAMINANTS: \"REMOVE_CONTAMINANTS\",\n        LOG_TRANSFORM: \"LOG_TRANSFORM\",\n        IMPUTE_MISSING_VALUES: \"IMPUTE_MISSING_VALUES\",\n    };\n\n    /**\n     * Modifies `data` to remove entries with True for \"Potential contaminant\"\n     * or \"Reverse\"\n     */\n    removeContaminants() {\n        console.log(\"removing contaminants\");\n        this.data = this.data\n            // filter by \"Potential contaminant\" and \"Reverse\"\n            .where((row) => !row[\"Potential contaminant\"] && !row[\"Reverse\"])\n            // keep only \"uniprotID\" and \"LFQ intensity ...\" columns\n            .subset([\n                \"id\",\n                \"uniprotID\",\n                ...this.samples.map((sample) => `LFQ intensity ${sample}`),\n            ])\n            .bake();\n\n        this.snapshots.set(\n            MSExperiment.SNAPSHOT_KEYS.REMOVE_CONTAMINANTS,\n            this.data\n        );\n    }\n\n    /**\n     * Modifies `data` with log2\n     */\n    logTransform() {\n        console.log(\"log transforming\");\n        for (const sample of this.samples) {\n            this.data = this.data\n                // transform column by taking log2 or setting to NaN\n                .transformSeries({\n                    [`LFQ intensity ${sample}`]: (value) =>\n                        value > 0 ? Math.log2(value) : NaN,\n                })\n                .bake();\n        }\n\n        this.snapshots.set(MSExperiment.SNAPSHOT_KEYS.LOG_TRANSFORM, this.data);\n    }\n\n    /**\n     * Modifies `data` to remove entries with NaN in all samples (i.e.\n     * intensity of 0 in all samples)\n     */\n    removeAllNaN() {\n        console.log(\"removing all NaN\");\n        this.data = this.data\n            // only keep rows where not every sample is NaN\n            .where(\n                (row) =>\n                    !this.samples.every((sample) =>\n                        isNaN(row[`LFQ intensity ${sample}`])\n                    )\n            )\n            .bake();\n    }\n\n    /**\n     * Modifies `replicates` to store group replicate samples into conditions\n     * @param {Object.<string, string[]>} replicates object containing\n     * replicate data, where keys are condition names and values are arrays of\n     * sample names\n     */\n    setReplicates(replicates) {\n        this.replicates.clear();\n        for (const [condition, samples] of Object.entries(replicates))\n            this.replicates.set(condition, samples);\n    }\n\n    /**\n     * Modifies `data` to replace NA's (intensity of 0) with imputed values.\n     * Imputed values are drawn from a uniform distribution of log2 intensities\n     * ranging from -3 * sigma to -2 * sigma among non-NA log2 intensity\n     * values within the same sample.\n     */\n    imputeMissingValues() {\n        console.log(\"imputing missing values\");\n        for (const sample of this.samples) {\n            const series = this.data\n                .getSeries(`LFQ intensity ${sample}`)\n                .where((value) => !Number.isNaN(value))\n                .bake();\n            const mean = series.average();\n            const stdev = series.std();\n\n            this.data = this.data\n                .transformSeries({\n                    [`LFQ intensity ${sample}`]: (value) =>\n                        Number.isNaN(value)\n                            ? random.uniform(\n                                  mean - 3 * stdev,\n                                  mean - 2 * stdev\n                              )()\n                            : value,\n                })\n                .bake();\n        }\n\n        this.snapshots.set(\n            MSExperiment.SNAPSHOT_KEYS.IMPUTE_MISSING_VALUES,\n            this.data\n        );\n    }\n}\n\nexport default MSExperiment;\n","import MSExperiment from \"./MSExperiment\";\n\nexport let currentExperiment = null;\n\n/**\n *\n * @param {MSExperiment} experiment\n */\nexport function setCurrentExperiment(experiment) {\n    currentExperiment = experiment;\n}\n\n/**\n * @returns {MSExperiment}\n */\nexport function getCurrentExperiment() {\n    return currentExperiment;\n}\n","import MSExperiment from \"./MSExperiment\";\nimport { getCurrentExperiment } from \"./CurrentExperiment\";\n\nexport default getCurrentExperiment;\n","// import { tsv } from \"d3\";\nimport { fromCSV } from \"data-forge\";\nimport MSExperiment from \"./MSExperiment\";\nimport { setCurrentExperiment } from \"./CurrentExperiment\";\n\n/**\n * Parse MaxQuant proteinGroups.txt output and set current MSExperiment\n * @param {string} url url to MaxQuant proteinGroups.txt file\n */\nexport async function readMaxQuant(file) {\n    // read file blob as string\n    const tsvString = await new Response(file).text();\n    // parse string to dataframe\n    const data = fromCSV(tsvString)\n        .setIndex(\"id\")\n        // add series \"uniprotID\" with first protein ID\n        .generateSeries({\n            uniprotID: (row) => row[\"Protein IDs\"].split(\";\")[0],\n        })\n        // cast series \"Potential contaminant\" and \"Reverse\" to boolean\n        .transformSeries({\n            \"Potential contaminant\": (value) => value === \"+\",\n            Reverse: (value) => value === \"+\",\n        })\n        .bake();\n\n    // get names of samples from column names\n    const samples = data\n        .getColumns()\n        .where((col) => col.name.startsWith(\"LFQ intensity \"))\n        .select((col) => col.name.split(\"LFQ intensity \")[1])\n        .toArray();\n\n    // make new MSExperiment object and set as current experiment\n    const experiment = new MSExperiment(data, samples);\n    setCurrentExperiment(experiment);\n}\n","export const ACTIONS = {\n    SET_INPUT_SAMPLES: \"SET_INPUT_SAMPLES\",\n    SET_INPUT_CONDITIONS: \"SET_INPUT_CONDITIONS\",\n};\n\nexport function createAction(type, data) {\n    return {\n        type,\n        data,\n    };\n}\n","import getCurrentExperiment from \"./analysis\";\nimport { readMaxQuant } from \"./analysis/DataPreparation\";\nimport currentExperiment from \"./analysis\";\nimport { ACTIONS, createAction } from \"./store/actions\";\nimport { dispatch } from \"d3\";\n\n/**\n * Begin analysis after file is uploaded by user.\n *  - Parse data as MaxQuant output\n *  - Remove potential contaminants and reverse sequences\n *  - Log transform LFQ intensities\n * @param {File} file uploaded data file\n */\nexport function onDataUpload(file) {\n    return (dispatch) => {\n        readMaxQuant(file).then(() => {\n            const experiment = currentExperiment();\n            experiment.removeContaminants();\n            experiment.logTransform();\n            experiment.removeAllNaN();\n\n            experiment.imputeMissingValues();\n\n            dispatch(\n                createAction(ACTIONS.SET_INPUT_SAMPLES, experiment.samples)\n            );\n        });\n    };\n}\n\nexport function onReplicatesSelect(conditions) {\n    return (dispatch) => {\n        const experiment = currentExperiment();\n        if (!experiment) return;\n        experiment.setReplicates(conditions);\n        dispatch(\n            createAction(ACTIONS.SET_INPUT_CONDITIONS, Object.keys(conditions))\n        );\n    };\n}\n","import { connect } from \"react-redux\";\nimport { onDataUpload } from \"../RunAnalysis\";\n\nfunction InputDataUpload({ onDataUpload }) {\n    return (\n        <div>\n            <label htmlFor=\"dataUpload\">Upload data: </label>\n            <input\n                type=\"file\"\n                id=\"dataUpload\"\n                name=\"dataUpload\"\n                onInput={(e) => onDataUpload(e.target.files[0])}\n            />\n        </div>\n    );\n}\n\nexport default connect(null, (dispatch) => {\n    return {\n        onDataUpload: (file) => {\n            dispatch(onDataUpload(file));\n        },\n    };\n})(InputDataUpload);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Modal from \"react-modal\";\n\nimport \"./InputReplicateSelection.css\";\nimport { onReplicatesSelect } from \"../RunAnalysis\";\n\nModal.setAppElement(\"#root\");\n\nfunction InputReplicateSelection({ samples, onReplicatesSelect }) {\n    const [replicatesModalOpen, setReplicatesModalOpen] = React.useState(false);\n    const [selectedReplicates, setSelectedReplicates] = React.useState([]);\n    const [conditionName, setConditionName] = React.useState(\"\");\n    const [conditions, setConditions] = React.useState({});\n\n    const onAddCondition = () => {\n        if (conditionName.length === 0) return;\n        setConditions(\n            Object.assign({}, conditions, {\n                [conditionName]: selectedReplicates,\n            })\n        );\n        setConditionName(\"\");\n    };\n\n    const onOKClick = () => {\n        onReplicatesSelect(conditions);\n        setReplicatesModalOpen(false);\n    };\n\n    return (\n        <div>\n            <button onClick={() => setReplicatesModalOpen(true)}>\n                Select replicates\n            </button>\n            <Modal isOpen={replicatesModalOpen} id=\"input-replicate-modal\">\n                <h1 id=\"input-replicate-modal-head\">Select replicates</h1>\n\n                <select\n                    multiple\n                    onChange={(e) => {\n                        setSelectedReplicates(\n                            Array.from(e.target.selectedOptions).map(\n                                (opt) => opt.value\n                            )\n                        );\n                    }}\n                >\n                    {samples.map((sample) => (\n                        <option value={sample} key={sample}>\n                            {sample}\n                        </option>\n                    ))}\n                </select>\n\n                <div>\n                    <label htmlFor=\"conditionName\">Condition name: </label>\n                    <input\n                        type=\"text\"\n                        id=\"conditionName\"\n                        name=\"conditionName\"\n                        value={conditionName}\n                        onChange={(e) => setConditionName(e.target.value)}\n                    />\n                    <br />\n                    <button onClick={onAddCondition}>Add condition</button>\n                    <br />\n                    <button onClick={() => setConditions({})}>\n                        Reset conditions\n                    </button>\n                </div>\n\n                <div>\n                    {Object.entries(conditions).map(\n                        ([condition, replicates]) => (\n                            <p key={condition}>\n                                {condition}: {replicates.join(\", \")}\n                            </p>\n                        )\n                    )}\n                </div>\n\n                <div id=\"input-replicate-modal-foot\">\n                    <button onClick={onOKClick}>OK</button>\n                </div>\n            </Modal>\n        </div>\n    );\n}\n\nexport default connect(\n    (state) => {\n        return {\n            samples: state.input.samples,\n        };\n    },\n    (dispatch) => {\n        return {\n            onReplicatesSelect: (conditions) => {\n                dispatch(onReplicatesSelect(conditions));\n            },\n        };\n    }\n)(InputReplicateSelection);\n","import \"./InputContainer.css\";\nimport InputDataUpload from \"./InputDataUpload\";\nimport InputReplicateSelection from \"./InputReplicateSelection\";\n\nfunction InputContainer({ id }) {\n    return (\n        <div id={id} className=\"input-container\">\n            <InputDataUpload />\n            <InputReplicateSelection />\n        </div>\n    );\n}\n\nexport default InputContainer;\n","import currentExperiment from \"./analysis\";\nimport MSExperiment from \"./analysis/MSExperiment\";\n\nexport const FIGURES = {\n    PRE_POST_IMPUTATION_VIOLIN: \"PRE_POST_IMPUTATION_VIOLIN\",\n};\n\nexport function makePlotlyDataLayout(options) {\n    const { type } = options;\n\n    let ret = { data: [], layout: {} };\n    switch (type) {\n        case FIGURES.PRE_POST_IMPUTATION_VIOLIN:\n            ret = makePrePostImputationViolin(options);\n            break;\n    }\n    ret.layout.autosize = true;\n\n    return ret;\n}\n\nfunction makePrePostImputationViolin({ samples, conditions }) {\n    const experiment = currentExperiment();\n    const makeViolinTrace = (trace) => {\n        return Object.assign(trace, {\n            type: \"violin\",\n            width: 3,\n            points: \"suspectedoutliers\",\n            jitter: 0.1,\n        });\n    };\n\n    let ret = { data: [], layout: {} };\n    if (samples != undefined && conditions == undefined) {\n        ret = {\n            data: [\n                ...samples.map((sample) =>\n                    makeViolinTrace({\n                        name: \"pre\",\n                        x: experiment.snapshots\n                            .get(MSExperiment.SNAPSHOT_KEYS.LOG_TRANSFORM)\n                            .getSeries(`LFQ intensity ${sample}`)\n                            .toArray(),\n                        y0: sample,\n                        legendgroup: \"pre\",\n                        side: \"positive\",\n                        pointpos: 0.1,\n                    })\n                ),\n                ...samples.map((sample) =>\n                    makeViolinTrace({\n                        name: \"post\",\n                        x: experiment.snapshots\n                            .get(\n                                MSExperiment.SNAPSHOT_KEYS.IMPUTE_MISSING_VALUES\n                            )\n                            .getSeries(`LFQ intensity ${sample}`)\n                            .toArray(),\n                        y0: sample,\n                        legendgroup: \"post\",\n                        side: \"negative\",\n                        pointpos: -0.1,\n                    })\n                ),\n            ],\n            layout: {},\n        };\n    } else if (samples == undefined && conditions != undefined) {\n        ret = {\n            data: [\n                ...conditions.map((condition) =>\n                    makeViolinTrace({\n                        name: \"pre\",\n                        x: experiment.replicates\n                            .get(condition)\n                            .map((sample) =>\n                                experiment.snapshots\n                                    .get(\n                                        MSExperiment.SNAPSHOT_KEYS.LOG_TRANSFORM\n                                    )\n                                    .getSeries(`LFQ intensity ${sample}`)\n                                    .toArray()\n                            )\n                            .flat(),\n                        y0: condition,\n                        legendgroup: \"pre\",\n                        side: \"positive\",\n                        pointpos: 0.1,\n                    })\n                ),\n                ...conditions.map((condition) =>\n                    makeViolinTrace({\n                        name: \"post\",\n                        x: experiment.replicates\n                            .get(condition)\n                            .map((sample) =>\n                                experiment.snapshots\n                                    .get(\n                                        MSExperiment.SNAPSHOT_KEYS\n                                            .IMPUTE_MISSING_VALUES\n                                    )\n                                    .getSeries(`LFQ intensity ${sample}`)\n                                    .toArray()\n                            )\n                            .flat(),\n                        y0: condition,\n                        legendgroup: \"post\",\n                        side: \"negative\",\n                        pointpos: -0.1,\n                    })\n                ),\n            ],\n            layout: {},\n        };\n    }\n\n    Object.assign(ret.layout, {\n        title: \"log2 intensities pre- and post-imputation\",\n        yaxis: {\n            automargin: true,\n        },\n    });\n    return ret;\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./FigureSampleConditionSelector.css\";\n\nfunction FigureSampleConditionSelector({\n    samples,\n    conditions,\n    onSampleConditionChange,\n}) {\n    const [figureType, setFigureType] = React.useState(\"samples\");\n\n    const onFigureTypeChange = (e) => {\n        setFigureType(e.currentTarget.value);\n        console.log(e.currentTarget.value);\n    };\n\n    return (\n        <div className=\"figure-sample-condition-selector\">\n            <div>\n                <input\n                    type=\"radio\"\n                    id=\"figureTypeSamples\"\n                    name=\"figureType\"\n                    value=\"samples\"\n                    checked={figureType === \"samples\"}\n                    onChange={onFigureTypeChange}\n                />\n                <label htmlFor=\"figureTypeSamples\">Samples</label>\n                <br />\n                <input\n                    type=\"radio\"\n                    id=\"figureTypeConditions\"\n                    name=\"figureType\"\n                    value=\"conditions\"\n                    checked={figureType === \"conditions\"}\n                    onChange={onFigureTypeChange}\n                />\n                <label htmlFor=\"figureTypeConditions\">Conditions</label>\n            </div>\n            <select\n                multiple\n                onChange={(e) => {\n                    onSampleConditionChange({\n                        [figureType]: Array.from(e.target.selectedOptions).map(\n                            (opt) => opt.value\n                        ),\n                    });\n                }}\n            >\n                {{ samples, conditions }[figureType].map((name) => (\n                    <option value={name} key={name}>\n                        {name}\n                    </option>\n                ))}\n            </select>\n        </div>\n    );\n}\n\nexport default connect((state) => {\n    return {\n        samples: state.input.samples,\n        conditions: state.input.conditions,\n    };\n}, null)(FigureSampleConditionSelector);\n","import React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport { connect } from \"react-redux\";\nimport { FIGURES, makePlotlyDataLayout } from \"../Figures\";\nimport FigureSampleConditionSelector from \"./FigureSampleConditionSelector\";\n\nimport \"./MainPanelContainer.css\";\n\nfunction MainPanelContainer({ id, samples }) {\n    const [figureOptions, setFigureOptions] = React.useState();\n    const [plot, setPlot] = React.useState({\n        data: [],\n        layout: {\n            autosize: true,\n        },\n    });\n\n    const onShowPlotClick = () => {\n        setPlot(makePlotlyDataLayout(figureOptions));\n    };\n\n    return (\n        <div id={id} className=\"main-container\">\n            <div className=\"main-figure-options\">\n                {/* select figure type */}\n                <select\n                    onChange={(e) => {\n                        setFigureOptions(\n                            Object.assign({}, figureOptions, {\n                                type: e.target.value,\n                            })\n                        );\n                        console.log(e.target.value);\n                    }}\n                    defaultValue=\"default\"\n                >\n                    {[\n                        <option disabled value=\"default\" key=\"default\">\n                            -- select an option --\n                        </option>,\n                        ...Object.keys(FIGURES).map((fig) => (\n                            <option value={fig} key={fig}>\n                                {fig}\n                            </option>\n                        )),\n                    ]}\n                </select>\n\n                {/* select figure sample */}\n                <FigureSampleConditionSelector\n                    onSampleConditionChange={({ samples, conditions }) =>\n                        setFigureOptions(\n                            Object.assign({}, figureOptions, {\n                                samples,\n                                conditions,\n                            })\n                        )\n                    }\n                />\n\n                {/* show plot */}\n                <button onClick={onShowPlotClick}>Show plot</button>\n            </div>\n            <Plot\n                className=\"main-plot\"\n                data={plot.data}\n                layout={plot.layout}\n                useResizeHandler={true}\n            />\n        </div>\n    );\n}\n\nexport default connect((state) => {\n    return {\n        samples: state.input.samples,\n    };\n}, null)(MainPanelContainer);\n","function SidePanelContainer({ id }) {\n    return <div id={id}></div>;\n}\n\nexport default SidePanelContainer;\n","import \"./App.css\";\nimport InputContainer from \"./InputContainer\";\nimport MainPanelContainer from \"./MainPanelContainer\";\nimport SidePanelContainer from \"./SidePanelContainer\";\n\nfunction App() {\n    return (\n        <div id=\"app-container\">\n            <InputContainer id=\"input-container\" />\n            <SidePanelContainer id=\"sidepanel-container\" />\n            <MainPanelContainer id=\"mainpanel-container\" />\n        </div>\n    );\n}\n\nexport default App;\n","import { applyMiddleware, createStore, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { ACTIONS } from \"./actions\";\n\nconst initialState = {\n    input: {\n        samples: [],\n        conditions: [],\n    },\n    side: {},\n    main: {},\n};\n\nfunction inputReducer(state, action) {\n    switch (action.type) {\n        case ACTIONS.SET_INPUT_SAMPLES:\n            return Object.assign({}, state, {\n                samples: action.data,\n            });\n        case ACTIONS.SET_INPUT_CONDITIONS:\n            return Object.assign({}, state, {\n                conditions: action.data,\n            });\n    }\n    return state;\n}\n\nfunction rootReducer(state = initialState, action) {\n    const cpy = { ...state };\n    switch (action.type) {\n        case ACTIONS.SET_INPUT_SAMPLES:\n        case ACTIONS.SET_INPUT_CONDITIONS:\n            cpy.input = inputReducer(state.input, action);\n            break;\n    }\n    return cpy;\n}\n\nconst composeEnhancers =\n    (typeof window !== \"undefined\" &&\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n    compose;\n\nexport default createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(thunk))\n);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport store from \"./store/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n"],"sourceRoot":""}
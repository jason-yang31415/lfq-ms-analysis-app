{"version":3,"sources":["AnalysisWorker.js","worker.js","store/actions.js","components/InputDataUpload.js","RunAnalysis.js","components/InputReplicateSelection.js","analysis/utils.js","analysis/Imputation.js","analysis/MSExperiment.js","components/InputImputation.js","components/InputComparisonSelection.js","components/InputContainer.js","Figures.js","components/MainPanelContainer.js","components/SidePanelContainer.js","components/FigureOptions.js","components/ViewContainer.js","components/App.js","store/store.js","index.js"],"names":["worker","wrap","Worker","ACTIONS","createAction","type","data","connect","dispatch","onDataUpload","file","Response","arrayBuffer","then","ab","transfer","getSamples","samples","htmlFor","id","name","onInput","e","target","files","Modal","setAppElement","state","input","onReplicatesSelect","conditions","Object","keys","React","useState","replicatesModalOpen","setReplicatesModalOpen","selectedReplicates","setSelectedReplicates","conditionName","setConditionName","setConditions","onClick","isOpen","style","overlay","zIndex","multiple","onChange","Array","from","selectedOptions","map","opt","value","sample","length","assign","margin","entries","condition","replicates","join","ttest","arr1","arr2","m1","jstat","mean","m2","s1","stdev","s2","se","Math","sqrt","pow","df","floor","t","p","studentt","cdf","abs","pAdjust","pvalues","index","sort","a","b","i","padj","min","entry","imputeUniform","DataFrame","columns","MSExperiment","COMMON_COLUMNS","reduce","obj","column","getSeries","series","where","Number","isNaN","bake","average","std","select","random","uniform","getIndex","imputeConditionRelative","corrCache","Map","corr","has","tuple","get","toArray","arrNaN","c","corrcoeff","filter","v","max","set","deltaCache","delta","deltas","res","samplesByNumNotNaN","val","sum","imputedRelative","row","refSample","values","acc","s","meanCorr","Dmean","Dstd","Dnew","normal","imputedUniform","subset","zip","rowRel","rowUnif","every","imputeRelative","columnSpec","forEach","m","result","getColumns","this","rawData","snapshots","comparisons","removeContaminants","bind","logTransform","removeAllNaN","setReplicates","key","console","log","SNAPSHOT_KEYS","REMOVE_CONTAMINANTS","log2","NaN","LOG_TRANSFORM","normalize","medians","median","maxMedian","apply","MEDIAN_NORMALIZATION","clear","method","IMPUTATION_METHODS","METHOD_31","Imputation","METHOD_46","METHOD_47","IMPUTE_MISSING_VALUES","thresholdP","thresholdLogFC","thresholdReps","conditionA","conditionB","rawA","rawB","comparisonData","arrA","arrB","rowId","meanA","meanB","pvalue","countNonzeroReps","raw","at","withSeries","withIndex","Series","output","onImputeClick","options","onImpute","imputationModalOpen","setImputationModalOpen","setOptions","checked","currentTarget","onComparisonSelect","thresholds","onComparisonsSelect","comparisonModalOpen","setComparisonModalOpen","setThresholdP","setThresholdLogFC","setThresholdReps","setComparisons","selected","cpy","includes","push","splice","indexOf","onComparisonChange","disabled","step","InputContainer","className","FIGURES","LOG_VIOLIN","PRE_POST_IMPUTATION_VIOLIN","PRE_POST_IMPUTATION_BOXPLOT","VOLCANO","P_VALUE_HISTOGRAM","makePlotlyDataLayout","ret","layout","makeLogViolin","makePrePostImputationViolin","makePrePostImputationBoxplot","makeVolcanoPlot","makePValueHistogram","autosize","makeViolinTrace","trace","width","points","undefined","Promise","all","getData","x","y0","side","getReplicates","array","flat","title","showlegend","xaxis","yaxis","automargin","legendgroup","line","color","makeBoxplotTrace","y","x0","marker","boxmode","boxgap","boxgroupgap","highlightGenes","highlightGeneSet","Set","g","toLowerCase","getComparisonData","logfc","genes","significant","mode","log10","hovertext","size","sig","start","end","opacity","xbins","barmode","figureOptions","view","plot","setPlot","useEffect","useResizeHandler","height","divId","setData","getComparisonsTable","selectableRows","figureType","onOptionsChange","sampleCondition","setSampleCondition","onFigureTypeChange","JSON","parse","stringify","placeholder","split","onOptionsSet","onDownloadClick","downloadData","blob","Blob","link","document","createElement","href","window","URL","createObjectURL","download","click","onSavePlotClick","Plotly","downloadImage","format","filename","setFigureOptions","defaultValue","fig","changedOptions","App","initialState","main","inputReducer","action","viewReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","store","getElementById"],"mappings":"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","file":"static/js/main.3cf60f1b.chunk.js","sourcesContent":["/* eslint-disable import/no-webpack-loader-syntax */\nimport Worker from \"worker-loader!./worker.js\";\nimport { wrap } from \"comlink\";\n\n// instantiate worker for analysis\nconst worker = wrap(new Worker());\nexport default worker;\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/worker.ab02fb89.worker.js\");\n}\n","export const ACTIONS = {\n    SET_INPUT_SAMPLES: \"SET_INPUT_SAMPLES\",\n    SET_INPUT_CONDITIONS: \"SET_INPUT_CONDITIONS\",\n    SET_INPUT_COMPARISONS: \"SET_INPUT_COMPARISONS\",\n    SET_VIEW_FIGURE_OPTIONS: \"SET_VIEW_FIGURE_OPTIONS\",\n};\n\nexport function createAction(type, data) {\n    return {\n        type,\n        data,\n    };\n}\n","import { connect } from \"react-redux\";\nimport { onDataUpload } from \"../RunAnalysis\";\n\nfunction InputDataUpload({ onDataUpload }) {\n    return (\n        <div>\n            <label htmlFor=\"dataUpload\">\n                (1) Upload data to begin analysis:{\" \"}\n            </label>\n            <input\n                type=\"file\"\n                id=\"dataUpload\"\n                name=\"dataUpload\"\n                onInput={(e) => onDataUpload(e.target.files[0])}\n            />\n\n            <ul>\n                <li>\n                    View log-transformed intensity distributions per sample as\n                    violin plot or boxplot.\n                </li>\n            </ul>\n        </div>\n    );\n}\n\nexport default connect(null, (dispatch) => {\n    return {\n        onDataUpload: (file) => {\n            dispatch(onDataUpload(file));\n        },\n    };\n})(InputDataUpload);\n","import worker from \"./AnalysisWorker\";\nimport { transfer } from \"comlink\";\nimport { ACTIONS, createAction } from \"./store/actions\";\nimport Plotly from \"plotly.js\";\n\n/**\n * This file interfaces between UI and analysis. UI changes are handled on the\n * main thread (this file) while analysis is handled in a worker (see\n * worker.js); each function calls the equivalent function in the worker, via\n * comlink proxy, to handle the analysis aspect off of the main thread.\n */\n\nexport function onDataUpload(file) {\n    return (dispatch) => {\n        new Response(file)\n            // wrap file blob in response to read data as array buffer\n            .arrayBuffer()\n            // transfer array buffer to worker for processing and analysis\n            .then((ab) => {\n                return worker.onDataUpload(transfer(ab, [ab]));\n            })\n            // retrieve sample names\n            .then(() => {\n                return worker.getSamples();\n            })\n            // update UI with sample names\n            .then((samples) => {\n                dispatch(createAction(ACTIONS.SET_INPUT_SAMPLES, samples));\n            });\n    };\n}\n\nexport function onReplicatesSelect(conditions) {\n    return (dispatch) => {\n        // transfer conditions object to worker for processing\n        worker.onReplicatesSelect(conditions).then(() => {\n            // update UI with condition names\n            dispatch(\n                createAction(\n                    ACTIONS.SET_INPUT_CONDITIONS,\n                    Object.keys(conditions)\n                )\n            );\n        });\n    };\n}\n\nexport function onImpute(options) {\n    return (dispatch) => {\n        // transfer options to worker and do processing/imputation\n        worker.onImpute(options);\n    };\n}\n\nexport function onComparisonsSelect(comparisons, thresholds) {\n    return (dispatch) => {\n        // transfer comparisons object to worker for processing\n        worker.onComparisonsSelect(comparisons, thresholds).then(() => {\n            dispatch(createAction(ACTIONS.SET_INPUT_COMPARISONS, comparisons));\n        });\n    };\n}\n\nexport function downloadData() {\n    return (dispatch) => {\n        // get bytes to save as excel file from worker\n        worker.downloadData().then((data) => {\n            // make new blob and link pointing to blob, click to save file\n            const blob = new Blob([data], { type: \"application/vnd.ms-excel\" });\n            const link = document.createElement(\"a\");\n            link.href = window.URL.createObjectURL(blob);\n            link.download = \"results.xlsx\";\n            link.click();\n        });\n    };\n}\n\nexport function saveFigure() {\n    return (dispatch) => {\n        Plotly.downloadImage(\"mainpanel-figure\", {\n            format: \"png\",\n            width: 1024,\n            height: 1024,\n            filename: \"figure\",\n        });\n    };\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Modal from \"react-modal\";\n\nimport \"./InputReplicateSelection.css\";\nimport { onReplicatesSelect } from \"../RunAnalysis\";\n\nModal.setAppElement(\"#root\");\n\nfunction InputReplicateSelection({ samples, onReplicatesSelect }) {\n    const [replicatesModalOpen, setReplicatesModalOpen] = React.useState(false);\n    const [selectedReplicates, setSelectedReplicates] = React.useState([]);\n    const [conditionName, setConditionName] = React.useState(\"\");\n    const [conditions, setConditions] = React.useState({});\n\n    const onAddCondition = () => {\n        if (conditionName.length === 0) return;\n        setConditions(\n            Object.assign({}, conditions, {\n                [conditionName]: selectedReplicates,\n            })\n        );\n        setConditionName(\"\");\n    };\n\n    const onOKClick = () => {\n        onReplicatesSelect(conditions);\n        setReplicatesModalOpen(false);\n    };\n\n    return (\n        <div>\n            <span>(2) </span>\n            <button onClick={() => setReplicatesModalOpen(true)}>\n                Select replicates\n            </button>\n\n            <ul>\n                <li>\n                    View log-transformed intensity distributions per condition\n                    as violin plot or boxplot.\n                </li>\n            </ul>\n\n            <Modal\n                isOpen={replicatesModalOpen}\n                id=\"input-replicate-modal\"\n                style={{\n                    overlay: {\n                        zIndex: 1000,\n                    },\n                }}\n            >\n                <h1 id=\"input-replicate-modal-head\">Select replicates</h1>\n\n                <div id=\"input-replicate-modal-left\">\n                    <p>Samples present in data:</p>\n                    <select\n                        multiple\n                        onChange={(e) => {\n                            setSelectedReplicates(\n                                Array.from(e.target.selectedOptions).map(\n                                    (opt) => opt.value\n                                )\n                            );\n                        }}\n                    >\n                        {samples.map((sample) => (\n                            <option value={sample} key={sample}>\n                                {sample}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n\n                <div>\n                    <p>New condition wtih selected samples as replicates:</p>\n                    <label htmlFor=\"conditionName\">Condition name: </label>\n                    <input\n                        type=\"text\"\n                        id=\"conditionName\"\n                        name=\"conditionName\"\n                        value={conditionName}\n                        onChange={(e) => setConditionName(e.target.value)}\n                    />\n                    <br />\n                    <button onClick={onAddCondition}>Add condition</button>\n                    <br />\n                    <hr style={{ margin: \"2rem\" }} />\n                    <button onClick={() => setConditions({})}>\n                        Reset conditions\n                    </button>\n                </div>\n\n                <div id=\"input-replicate-modal-right\">\n                    <p>Conditions and replicates:</p>\n                    <div>\n                        {Object.entries(conditions).map(\n                            ([condition, replicates]) => (\n                                <p key={condition}>\n                                    {condition}: {replicates.join(\", \")}\n                                </p>\n                            )\n                        )}\n                    </div>\n                </div>\n\n                <div id=\"input-replicate-modal-foot\">\n                    <button onClick={onOKClick}>OK</button>\n                </div>\n            </Modal>\n        </div>\n    );\n}\n\nexport default connect(\n    (state) => {\n        return {\n            samples: state.input.samples,\n        };\n    },\n    (dispatch) => {\n        return {\n            onReplicatesSelect: (conditions) => {\n                dispatch(onReplicatesSelect(conditions));\n            },\n        };\n    }\n)(InputReplicateSelection);\n","import jstat from \"jstat\";\n\n/**\n * Calculates two-sample Welch's t-test (two tail).\n * @param {number[]} arr1 sample 1\n * @param {number[]} arr2 sample 2\n */\nexport function ttest(arr1, arr2) {\n    const m1 = jstat(arr1).mean();\n    const m2 = jstat(arr2).mean();\n    const s1 = jstat(arr1).stdev(true);\n    const s2 = jstat(arr2).stdev(true);\n    const se = Math.sqrt(\n        Math.pow(s1, 2) / arr1.length + Math.pow(s2, 2) / arr2.length\n    );\n    const df = Math.floor(\n        Math.pow(\n            Math.pow(s1, 2) / arr1.length + Math.pow(s2, 2) / arr2.length,\n            2\n        ) /\n            (Math.pow(s1, 4) / (Math.pow(arr1.length, 2) * (arr1.length - 1)) +\n                Math.pow(s2, 4) /\n                    (Math.pow(arr2.length, 2) * (arr2.length - 1)))\n    );\n    const t = (m2 - m1) / se;\n    const p = 2 * jstat.studentt.cdf(-Math.abs(t), df);\n    return { t, p, df };\n}\n\n/**\n * Adjust p values using Benjamini-Hochberg method (FDR)\n * @param {number[]} pvalues array containing p values\n */\nexport function pAdjust(pvalues) {\n    // enumerate indices for original order, then sort by p value\n    const entries = pvalues\n        .map((p, index) => {\n            return { index, p };\n        })\n        .sort((a, b) => a.p - b.p);\n    // calculate BH corrected p value\n    for (let i = entries.length - 1; i >= 0; i--) {\n        entries[i].padj = Math.min(\n            1,\n            Math.min(\n                (entries.length * entries[i].p) / (i + 1),\n                i < entries.length - 1 ? entries[i + 1].padj : 1\n            )\n        );\n    }\n    // use original order (sort by index) then return adjusted p values\n    return entries.sort((a, b) => a.index - b.index).map((entry) => entry.padj);\n}\n","import { DataFrame, Series } from \"data-forge\";\nimport random from \"random\";\nimport MSExperiment from \"./MSExperiment\";\nimport jstat from \"jstat\";\nimport { tuple } from \"immutable-tuple\";\n\n/**\n * Do imputation from uniform distribution between sample mean - 3 * std to\n * mean - 2 * std\n * @param {DataFrame} data DataFrame containing intensity data\n * @param {string[]} samples names of samples\n */\nexport function imputeUniform(data, samples) {\n    return new DataFrame({\n        columns: {\n            // copy common columns from current dataframe\n            ...MSExperiment.COMMON_COLUMNS.reduce(\n                (obj, column) =>\n                    Object.assign(obj, {\n                        [column]: data.getSeries(column),\n                    }),\n                {}\n            ),\n            // perform imputation on LFQ intensity columns\n            ...samples.reduce((obj, sample) => {\n                // compute mean and standard deviation of non-NaN log\n                // intensity values for the sample\n                const series = data\n                    .getSeries(`LFQ intensity ${sample}`)\n                    .where((value) => !Number.isNaN(value))\n                    .bake();\n                const mean = series.average();\n                const stdev = series.std();\n                obj[`LFQ intensity ${sample}`] = data\n                    .getSeries(`LFQ intensity ${sample}`)\n                    .select(\n                        // replace NaN's with random values drawn from\n                        // uniform distribution\n                        (value) =>\n                            Number.isNaN(value)\n                                ? random.uniform(\n                                      mean - 3 * stdev,\n                                      mean - 2 * stdev\n                                  )()\n                                : value\n                    );\n                return obj;\n            }, {}),\n        },\n        index: data.getIndex(),\n    }).bake();\n}\n\n// minimum correlation\nconst MINIMUM_CORRELATION = 0.1;\n\n/**\n * Do relative imputation in a single condition.\n * @param {DataFrame} data DataFrame containing the relevant sample columns\n * @param {string[]} samples names of samples in the same condition\n * @param {number} replicates threshold number of replicates; do not impute if\n * the protein is detected in fewer than `replicate` replicates\n */\nfunction imputeConditionRelative(data, samples, replicates = 2) {\n    // calculate Pearson correlation coefficient between non-NaN values of two\n    // samples\n    const corrCache = new Map();\n    const corr = (s1, s2) => {\n        // return calculated correlation if already in cache\n        if (corrCache.has(tuple(s1, s2))) return corrCache.get(tuple(s1, s2));\n\n        // get sample values as arrays\n        const arr1 = data.getSeries(`LFQ intensity ${s1}`).toArray();\n        const arr2 = data.getSeries(`LFQ intensity ${s2}`).toArray();\n        // mask proteins with NaN in either sample: true if non-NaN in both\n        const arrNaN = [...Array(arr1.length).keys()].map(\n            (i) => !isNaN(arr1[i]) && !isNaN(arr2[i])\n        );\n\n        // calculate Pearson correlation coefficient\n        let c = jstat.corrcoeff(\n            // filter both arrays to only use proteins that are not NaN in both\n            // samples\n            arr1.filter((v, i) => arrNaN[i]),\n            arr2.filter((v, i) => arrNaN[i])\n        );\n        // use a minimum value for correlation\n        c = Math.max(isNaN(c) ? 0 : c, MINIMUM_CORRELATION);\n\n        // put correlation in cache and return\n        corrCache.set(tuple(s1, s2), c);\n        return c;\n    };\n\n    // calculate distribution of deltas between two samples\n    const deltaCache = new Map();\n    const delta = (s1, s2) => {\n        // return calculated mean and standard deviation on delta if already in\n        // cache\n        if (deltaCache.has(tuple(s1, s2))) return deltaCache.get(tuple(s1, s2));\n\n        // get sample values as arrays\n        const arr1 = data.getSeries(`LFQ intensity ${s1}`).toArray();\n        const arr2 = data.getSeries(`LFQ intensity ${s2}`).toArray();\n        // calculate array of deltas\n        const deltas = jstat(\n            // array of indices 0...N\n            [...Array(arr1.length).keys()]\n                // filter to get indices of proteins that are not NaN in both\n                // samples\n                .filter((i) => !isNaN(arr1[i]) && !isNaN(arr2[i]))\n                // calculate delta for each index as difference / mean\n                .map((i) => (arr1[i] - arr2[i]) / ((arr1[i] + arr2[i]) / 2))\n        );\n        // calculate mean and standard deviation of deltas\n        const res = {\n            mean: deltas.mean(),\n            std: deltas.stdev(),\n        };\n\n        // put mean and standard deviation of deltas in cache and return\n        deltaCache.set(tuple(s1, s2), res);\n        return res;\n    };\n\n    // sort samples by number of NaN proteins, from lowest to highest (use this\n    // array to get the reference sample with the most non-NaN proteins)\n    const samplesByNumNotNaN = samples.sort(\n        (a, b) =>\n            data\n                .getSeries(`LFQ intensity ${a}`)\n                .select((val) => (isNaN(val) ? 1 : 0))\n                .sum() -\n            data\n                .getSeries(`LFQ intensity ${b}`)\n                .select((val) => (isNaN(val) ? 1 : 0))\n                .sum()\n    );\n\n    const imputedRelative = data\n        // do imputation for each protein\n        .select((row) => {\n            // count number of non-NaN replicates for this protein\n            const numNotNaN = Object.values(row)\n                .map((val) => (isNaN(val) ? 0 : 1))\n                .reduce((acc, val) => acc + val);\n            // only do imputation if protein is not NaN in >= `replicates`\n            // replicates\n            if (numNotNaN < replicates) return row;\n\n            // get reference sample by looping through samples (sorted by\n            // number of non-NaN proteins, starting with highest) and choosing\n            // first sample that is not NaN for this protein\n            let refSample;\n            for (let s of samplesByNumNotNaN) {\n                if (!isNaN(row[`LFQ intensity ${s}`])) {\n                    refSample = s;\n                    break;\n                }\n            }\n\n            // get mean correlation between selected reference sample and all\n            // samples which are NaN for this protein\n            const meanCorr = jstat(\n                samples\n                    .filter(\n                        (sample) =>\n                            sample !== refSample &&\n                            isNaN(row[`LFQ intensity ${sample}`])\n                    )\n                    .map((sample) => corr(sample, refSample))\n            ).mean();\n\n            // loop through all samples for this protein\n            return samples.reduce((obj, sample) => {\n                const val = row[`LFQ intensity ${sample}`];\n                if (isNaN(val)) {\n                    // if sample is NaN for this protein, do imputation by\n                    // getting distribution of deltas between sample and the\n                    // reference sample\n                    const { mean: Dmean, std: Dstd } = delta(sample, refSample);\n                    // draw new delta value from normal distribution\n                    const Dnew = random.normal(\n                        Dmean,\n                        Dstd / (Math.sqrt(2) * meanCorr)\n                    )();\n                    // calculate new intensity value and put in new row\n                    obj[`LFQ intensity ${sample}`] =\n                        row[`LFQ intensity ${refSample}`] * Math.abs(1 + Dnew);\n                } else {\n                    // if sample is not NaN for this protein, copy over the\n                    // value\n                    obj[`LFQ intensity ${sample}`] = val;\n                }\n                return obj;\n            }, {});\n        })\n        .bake();\n\n    // do uniform imputation to fill in remaining NaN values\n    const imputedUniform = imputeUniform(data, samples).subset(\n        samples.map((sample) => `LFQ intensity ${sample}`)\n    );\n\n    return (\n        imputedRelative\n            // loop through rows of relative and uniform imputation results\n            .zip(imputedUniform, (rowRel, rowUnif) => {\n                // use relative imputed row if there are no NaN values\n                const useRel = Object.values(rowRel).every(\n                    (val) => !isNaN(val)\n                );\n                return useRel ? rowRel : rowUnif;\n            })\n            .bake()\n    );\n}\n\n/**\n * Do two-step imputation strategy with relative imputation for proteins\n * detected in >= `replicate` replicates, and uniform imputation for proteins\n * detected in < `replicate` replicates.\n * @param {DataFrame} data DataFrame containing intensity data\n * @param {Map<string, string[]>} conditions map from each condition to array\n * of sample names of replicates\n * @param {number} replicates minimum number of replicates in which protein is\n * detected to use relative imputation\n */\nexport function imputeRelative(data, conditions, replicates = 2) {\n    // store columns with imputated data\n    const columnSpec = {};\n    conditions.forEach((samples, condition, m) => {\n        // do relative imputation for the samples of each condition\n        const result = imputeConditionRelative(\n            // pass only columns for samples of this condition\n            data.subset(samples.map((sample) => `LFQ intensity ${sample}`)),\n            samples,\n            replicates\n        );\n        // store resulting columns in the columnSpec object\n        for (const column of result.getColumns())\n            columnSpec[column.name] = column.series;\n    });\n\n    return new DataFrame({\n        columns: {\n            // copy common columns from current dataframe\n            ...MSExperiment.COMMON_COLUMNS.reduce(\n                (obj, column) =>\n                    Object.assign(obj, {\n                        [column]: data.getSeries(column),\n                    }),\n                {}\n            ),\n            // imputed data columns\n            ...columnSpec,\n        },\n        index: data.getIndex(),\n    }).bake();\n}\n","import { DataFrame, Series } from \"data-forge\";\nimport jstat from \"jstat\";\nimport { pAdjust, ttest } from \"./utils\";\nimport * as Imputation from \"./Imputation\";\n\nclass MSExperiment {\n    /**\n     *\n     * @param {DataFrame} data\n     * @param {string[]} samples\n     */\n    constructor(data, samples) {\n        this.data = data;\n        this.rawData = data;\n        this.samples = samples;\n\n        /** @type {Map<string, DataFrame} */\n        this.snapshots = new Map();\n\n        /** @type {Map<string, string[]>} */\n        this.replicates = new Map();\n\n        /** @type {Map<string, Map<string, DataFrame>>} */\n        this.comparisons = new Map();\n\n        this.removeContaminants = this.removeContaminants.bind(this);\n        this.logTransform = this.logTransform.bind(this);\n        this.removeAllNaN = this.removeAllNaN.bind(this);\n        this.setReplicates = this.setReplicates.bind(this);\n    }\n\n    static SNAPSHOT_KEYS = {\n        REMOVE_CONTAMINANTS: \"REMOVE_CONTAMINANTS\",\n        LOG_TRANSFORM: \"LOG_TRANSFORM\",\n        MEDIAN_NORMALIZATION: \"MEDIAN_NORMALIZATION\",\n        IMPUTE_MISSING_VALUES: \"IMPUTE_MISSING_VALUES\",\n    };\n\n    resetToSnapshot(key) {\n        if (this.snapshots.has(key)) this.data = this.snapshots.get(key);\n    }\n\n    static COMMON_COLUMNS = [\"id\", \"uniprotID\", \"gene\"];\n\n    static IMPUTATION_METHODS = {\n        METHOD_31: \"METHOD_31\",\n        METHOD_46: \"METHOD_46\",\n        METHOD_47: \"METHOD_47\",\n    };\n\n    /**\n     * Modifies `data` to remove entries with True for \"Potential contaminant\"\n     * or \"Reverse\"\n     */\n    removeContaminants() {\n        console.log(\"removing contaminants\");\n        this.data = this.data\n            // filter by \"Potential contaminant\" and \"Reverse\"\n            .where((row) => !row[\"Potential contaminant\"] && !row[\"Reverse\"])\n            // keep only common columns and \"LFQ intensity ...\" columns\n            .subset([\n                ...MSExperiment.COMMON_COLUMNS,\n                ...this.samples.map((sample) => `LFQ intensity ${sample}`),\n            ])\n            .bake();\n\n        this.snapshots.set(\n            MSExperiment.SNAPSHOT_KEYS.REMOVE_CONTAMINANTS,\n            this.data\n        );\n    }\n\n    /**\n     * Modifies `data` with log2\n     */\n    logTransform() {\n        console.log(\"log transforming\");\n        this.data = new DataFrame({\n            columns: {\n                // copy common columns from current dataframe\n                ...MSExperiment.COMMON_COLUMNS.reduce(\n                    (obj, column) =>\n                        Object.assign(obj, {\n                            [column]: this.data.getSeries(column),\n                        }),\n                    {}\n                ),\n                // log transform LFQ intensity columns\n                ...this.samples.reduce(\n                    (obj, sample) =>\n                        Object.assign(obj, {\n                            [`LFQ intensity ${sample}`]: this.data\n                                .getSeries(`LFQ intensity ${sample}`)\n                                .select((value) =>\n                                    // set to NaN if LFQ intensity is not\n                                    // positive\n                                    value > 0 ? Math.log2(value) : NaN\n                                ),\n                        }),\n                    {}\n                ),\n            },\n            index: this.data.getIndex(),\n        }).bake();\n    }\n\n    /**\n     * Modifies `data` to remove entries with NaN in all samples (i.e.\n     * intensity of 0 in all samples)\n     */\n    removeAllNaN() {\n        console.log(\"removing all NaN\");\n        this.data = this.data\n            // only keep rows where not every sample is NaN\n            .where(\n                (row) =>\n                    !this.samples.every((sample) =>\n                        isNaN(row[`LFQ intensity ${sample}`])\n                    )\n            )\n            .bake();\n\n        this.snapshots.set(MSExperiment.SNAPSHOT_KEYS.LOG_TRANSFORM, this.data);\n    }\n\n    /**\n     * Modifies `data` such that each sample is scaled to have the same median\n     * value, equal to the highest median pre-scaling.\n     */\n    normalizeMedians(normalize) {\n        console.log(\"normalizing medians\");\n\n        if (!normalize) {\n            this.snapshots.set(\n                MSExperiment.SNAPSHOT_KEYS.MEDIAN_NORMALIZATION,\n                this.data\n            );\n            return;\n        }\n\n        // calculate medians of each sample and store in map\n        /** @type {Map<string, number>} */\n        const medians = new Map();\n        this.samples.map((sample) =>\n            medians.set(\n                sample,\n                this.data\n                    .getSeries(`LFQ intensity ${sample}`)\n                    .where((value) => !Number.isNaN(value))\n                    .median()\n            )\n        );\n        const maxMedian = Math.max.apply(null, Array.from(medians.values()));\n\n        this.data = new DataFrame({\n            columns: {\n                // copy common columns from current dataframe\n                ...MSExperiment.COMMON_COLUMNS.reduce(\n                    (obj, column) =>\n                        Object.assign(obj, {\n                            [column]: this.data.getSeries(column),\n                        }),\n                    {}\n                ),\n                // median normalize LFQ intensity columns\n                ...this.samples.reduce(\n                    (obj, sample) =>\n                        Object.assign(obj, {\n                            [`LFQ intensity ${sample}`]: this.data\n                                .getSeries(`LFQ intensity ${sample}`)\n                                .select(\n                                    // scale each sample intensity so that\n                                    // sample median matches the maximum sample\n                                    // median\n                                    (value) =>\n                                        (value * maxMedian) /\n                                        medians.get(sample)\n                                ),\n                        }),\n                    {}\n                ),\n            },\n            index: this.data.getIndex(),\n        }).bake();\n\n        this.snapshots.set(\n            MSExperiment.SNAPSHOT_KEYS.MEDIAN_NORMALIZATION,\n            this.data\n        );\n    }\n\n    /**\n     * Modifies `replicates` to store group replicate samples into conditions\n     * @param {Object.<string, string[]>} replicates object containing\n     * replicate data, where keys are condition names and values are arrays of\n     * sample names\n     */\n    setReplicates(replicates) {\n        this.replicates.clear();\n        for (const [condition, samples] of Object.entries(replicates))\n            this.replicates.set(condition, samples);\n    }\n\n    /**\n     * Modifies `data` to replace NA's (intensity of 0) with imputed values.\n     * Imputed values are drawn from a uniform distribution of log2 intensities\n     * ranging from -3 * sigma to -2 * sigma among non-NA log2 intensity\n     * values within the same sample.\n     */\n    imputeMissingValues(method) {\n        console.log(\"imputing missing values\");\n\n        switch (method) {\n            case MSExperiment.IMPUTATION_METHODS.METHOD_31:\n                this.data = Imputation.imputeUniform(this.data, this.samples);\n                break;\n            case MSExperiment.IMPUTATION_METHODS.METHOD_46:\n                this.data = Imputation.imputeRelative(\n                    this.data,\n                    this.replicates\n                );\n                break;\n            case MSExperiment.IMPUTATION_METHODS.METHOD_47:\n                this.data = Imputation.imputeRelative(\n                    this.data,\n                    this.replicates,\n                    1\n                );\n        }\n\n        this.snapshots.set(\n            MSExperiment.SNAPSHOT_KEYS.IMPUTE_MISSING_VALUES,\n            this.data\n        );\n    }\n\n    /**\n     * Makes specified comparisons and stores results in `comparisons.\n     * @param {Object.<string, string[]>} comparisons object containing\n     * comparisons to make, with condition A as key and condition B in values\n     * array\n     * @param {number} thresholdP threshold adjusted p value to call a protein\n     * significant\n     * @param {number} thresholdLogFC threshold log2 fold change in intensity\n     * to call a protein significant\n     * @param {number} thresholdReps threshold number of replicates detected in\n     * the same condition to call a protein significant\n     */\n    makeComparisons(\n        comparisons,\n        { thresholdP = 0.05, thresholdLogFC = 1, thresholdReps = 2 } = {}\n    ) {\n        console.log(\"making comparisons\");\n        // loop through comparisons and set up `comparisons` map\n        for (const [conditionA, value] of Object.entries(comparisons)) {\n            if (!this.comparisons.has(conditionA))\n                this.comparisons.set(conditionA, new Map());\n\n            for (const conditionB of value) {\n                // subset relevant columns of raw data to count number of\n                // non-zero replicates later\n                const rawA = this.rawData.subset(\n                    this.replicates\n                        .get(conditionA)\n                        .map((sample) => `LFQ intensity ${sample}`)\n                );\n                const rawB = this.rawData.subset(\n                    this.replicates\n                        .get(conditionB)\n                        .map((sample) => `LFQ intensity ${sample}`)\n                );\n\n                const comparisonData = DataFrame.zip(\n                    [\n                        // for conditionA and conditionB, zip LFQ intensity columns\n                        // to make a column containing arrays of intensities from\n                        // replicates for that condition\n                        ...[conditionA, conditionB].map((condition) =>\n                            DataFrame.zip(\n                                this.replicates\n                                    .get(condition)\n                                    .map((sample) =>\n                                        this.data.getSeries(\n                                            `LFQ intensity ${sample}`\n                                        )\n                                    ),\n                                // zip multiple replicate columns into single\n                                // column containing array of values\n                                (values) => values.toArray()\n                            )\n                        ),\n                        // pass id as third item to zip\n                        this.data.subset([\"id\"]),\n                    ],\n                    // zip conditionA and conditionB columns of arrays arrA and\n                    // arrB\n                    ([arrA, arrB, { id: rowId }]) => {\n                        // calculate means of conditionA and conditionB\n                        // intensities\n                        const meanA = jstat(arrA).mean();\n                        const meanB = jstat(arrB).mean();\n                        // perform two-sample two-tailed t test (Welch) using\n                        // arrays of intensities to get p value\n                        const pvalue = ttest(arrA, arrB).p;\n\n                        // count number of replicates detected in raw data in\n                        // each condition\n                        const countNonzeroReps = (raw) =>\n                            Object.values(raw.at(rowId)).reduce((acc, val) => {\n                                if (Number(val) !== 0) acc++;\n                                return acc;\n                            }, 0);\n\n                        return {\n                            [`mean ${conditionA}`]: meanA,\n                            [`mean ${conditionB}`]: meanB,\n                            \"log FC\": meanB - meanA,\n                            \"p value\": pvalue,\n                            [`N ${conditionA}`]: countNonzeroReps(rawA),\n                            [`N ${conditionB}`]: countNonzeroReps(rawB),\n                        };\n                    }\n                )\n                    // copy common columns\n                    .withSeries(\n                        MSExperiment.COMMON_COLUMNS.reduce(\n                            (obj, column) =>\n                                Object.assign(obj, {\n                                    [column]: this.data.getSeries(column),\n                                }),\n                            {}\n                        )\n                    )\n                    .withIndex(this.data.getIndex())\n                    .bake()\n                    // calculate adjusted p value\n                    .withSeries({\n                        \"adjusted p value\": (df) =>\n                            new Series({\n                                index: df.getIndex(),\n                                values: pAdjust(\n                                    df.getSeries(\"p value\").toArray()\n                                ),\n                            }),\n                    })\n                    .bake()\n                    // check significance by p value, log FC, and replicates\n                    // detected\n                    .select((row) => {\n                        const output = { ...row };\n                        output[\"significant\"] =\n                            row[\"adjusted p value\"] <= thresholdP &&\n                            Math.abs(row[\"log FC\"]) >= thresholdLogFC &&\n                            (row[`N ${conditionA}`] >= thresholdReps ||\n                                row[`N ${conditionB}`] >= thresholdReps)\n                                ? \"yes\"\n                                : \"no\";\n                        return output;\n                    })\n                    .bake();\n\n                // put comparison dataframe into `comparisons` map\n                this.comparisons\n                    .get(conditionA)\n                    .set(conditionB, comparisonData);\n            }\n        }\n    }\n}\n\nexport default MSExperiment;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Modal from \"react-modal\";\n\nimport \"./InputImputation.css\";\nimport { onImpute } from \"../RunAnalysis\";\nimport MSExperiment from \"../analysis/MSExperiment\";\n\nModal.setAppElement(\"#root\");\n\nfunction InputImputation({ onImputeClick }) {\n    const [imputationModalOpen, setImputationModalOpen] = React.useState(false);\n    const [options, setOptions] = React.useState({\n        normalize: true,\n        method: MSExperiment.IMPUTATION_METHODS.METHOD_31,\n    });\n\n    const onOKClick = () => {\n        onImputeClick(options);\n        setImputationModalOpen(false);\n    };\n\n    return (\n        <div>\n            <span>(3) </span>\n            <button onClick={() => setImputationModalOpen(true)}>\n                Preprocess and impute\n            </button>\n\n            <ul>\n                <li>\n                    View log-transformed intensity distributions before and\n                    after imputation as violin plot or boxplot.\n                </li>\n            </ul>\n\n            <Modal\n                isOpen={imputationModalOpen}\n                id=\"input-imputation-modal\"\n                style={{\n                    overlay: {\n                        zIndex: 1000,\n                    },\n                }}\n            >\n                <h1 id=\"input-imputation-modal-head\">Imputation options</h1>\n\n                <div id=\"input-imputation-modal-body\">\n                    <h2>Pre-processing</h2>\n                    <input\n                        type=\"checkbox\"\n                        id=\"normalizeMedians\"\n                        checked={options.normalize}\n                        onChange={(e) =>\n                            setOptions(\n                                Object.assign({}, options, {\n                                    normalize: e.target.checked,\n                                })\n                            )\n                        }\n                    />\n                    <label htmlFor=\"normalizeMedians\">Normalize medians</label>\n                    <h2>Imputation</h2>\n                    <select\n                        onChange={(e) =>\n                            setOptions(\n                                Object.assign({}, options, {\n                                    method: e.currentTarget.value,\n                                })\n                            )\n                        }\n                    >\n                        <option\n                            value={MSExperiment.IMPUTATION_METHODS.METHOD_31}\n                        >\n                            method 3.1\n                        </option>\n                        <option\n                            value={MSExperiment.IMPUTATION_METHODS.METHOD_46}\n                        >\n                            method 4.6\n                        </option>\n                        <option\n                            value={MSExperiment.IMPUTATION_METHODS.METHOD_47}\n                        >\n                            method 4.7\n                        </option>\n                    </select>\n                </div>\n\n                <div id=\"input-replicate-modal-foot\">\n                    <button onClick={onOKClick}>OK</button>\n                </div>\n            </Modal>\n        </div>\n    );\n}\n\nexport default connect(\n    (state) => {\n        return {};\n    },\n    (dispatch) => {\n        return {\n            onImputeClick: (options) => {\n                dispatch(onImpute(options));\n            },\n        };\n    }\n)(InputImputation);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Modal from \"react-modal\";\n\nimport \"./InputComparisonSelection.css\";\nimport { onComparisonsSelect } from \"../RunAnalysis\";\n\nModal.setAppElement(\"#root\");\n\nfunction InputComparisonSelection({ conditions, onComparisonSelect }) {\n    const [comparisonModalOpen, setComparisonModalOpen] = React.useState(false);\n\n    const [thresholdP, setThresholdP] = React.useState(0.05);\n    const [thresholdLogFC, setThresholdLogFC] = React.useState(1);\n    const [thresholdReps, setThresholdReps] = React.useState(2);\n\n    /** @type {Map.<string, Set<string>} */\n    const [comparisons, setComparisons] = React.useState({});\n\n    const onComparisonChange = (conditionA, conditionB, selected) => {\n        let cpy = { ...comparisons };\n        if (selected) {\n            cpy[conditionA] = [...(cpy[conditionA] || [])];\n            if (!cpy[conditionA].includes(conditionB))\n                cpy[conditionA].push(conditionB);\n        } else {\n            if (conditionA in cpy && cpy[conditionA].includes(conditionB)) {\n                cpy[conditionA] = [...cpy[conditionA]].splice(\n                    cpy[conditionA].indexOf(conditionB),\n                    1\n                );\n            }\n        }\n        setComparisons(cpy);\n    };\n\n    const onOKClick = () => {\n        onComparisonSelect(comparisons, {\n            thresholdP,\n            thresholdLogFC,\n            thresholdReps,\n        });\n        setComparisonModalOpen(false);\n    };\n\n    return (\n        <div>\n            <span>(4) </span>\n            <button onClick={() => setComparisonModalOpen(true)}>\n                Select comparisons\n            </button>\n\n            <ul>\n                <li>\n                    View enriched and depleted proteins per comparison as\n                    volcano plot.\n                </li>\n                <li>View distribution of p values and adjusted p values.</li>\n                <li>\n                    View mean intensities, log fold changes, p values as data\n                    table.\n                </li>\n            </ul>\n\n            <Modal\n                isOpen={comparisonModalOpen}\n                id=\"input-comparison-modal\"\n                style={{\n                    overlay: {\n                        zIndex: 1000,\n                    },\n                }}\n            >\n                <h1 id=\"input-comparison-modal-head\">Select comparisons</h1>\n\n                <table>\n                    <tbody>\n                        <tr>\n                            <td></td>\n                            {conditions.map((condition) => (\n                                <td key={`${condition} B`}>{condition}</td>\n                            ))}\n                        </tr>\n                        {conditions.map((conditionA) => (\n                            <tr key={`${conditionA} row`}>\n                                <td key={`${conditionA} A`}>{conditionA}</td>\n                                {conditions.map((conditionB) => (\n                                    <td key={`${conditionA},${conditionB}`}>\n                                        <input\n                                            type=\"checkbox\"\n                                            onChange={(e) =>\n                                                onComparisonChange(\n                                                    conditionA,\n                                                    conditionB,\n                                                    e.target.checked\n                                                )\n                                            }\n                                            disabled={conditionA === conditionB}\n                                        />\n                                    </td>\n                                ))}\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n\n                <div>\n                    <label htmlFor=\"threshold-p\">Significant p-value: </label>\n                    <input\n                        type=\"number\"\n                        step=\"any\"\n                        min={0}\n                        value={thresholdP}\n                        onChange={(e) => setThresholdP(e.target.value)}\n                        id=\"threshold-p\"\n                    />\n                    <br />\n                    <label htmlFor=\"threshold-logfc\">\n                        Significant log fold change:{\" \"}\n                    </label>\n                    <input\n                        type=\"number\"\n                        step=\"any\"\n                        min={0}\n                        value={thresholdLogFC}\n                        onChange={(e) => setThresholdLogFC(e.target.value)}\n                        id=\"threshold-logfc\"\n                    />\n                    <br />\n                    <label htmlFor=\"threshold-reps\">\n                        Significant number of replicates:{\" \"}\n                    </label>\n                    <input\n                        type=\"number\"\n                        step={1}\n                        min={0}\n                        value={thresholdReps}\n                        onChange={(e) => setThresholdReps(e.target.value)}\n                        id=\"threshold-reps\"\n                    />\n                </div>\n\n                <div id=\"input-comparison-modal-foot\">\n                    <button onClick={onOKClick}>OK</button>\n                </div>\n            </Modal>\n        </div>\n    );\n}\n\nexport default connect(\n    (state) => {\n        return {\n            conditions: state.input.conditions,\n        };\n    },\n    (dispatch) => {\n        return {\n            onComparisonSelect: (comparisons, thresholds) => {\n                dispatch(onComparisonsSelect(comparisons, thresholds));\n            },\n        };\n    }\n)(InputComparisonSelection);\n","import \"./InputContainer.css\";\nimport InputDataUpload from \"./InputDataUpload\";\nimport InputReplicateSelection from \"./InputReplicateSelection\";\nimport InputImputation from \"./InputImputation\";\nimport InputComparisonSelection from \"./InputComparisonSelection\";\n\nfunction InputContainer({ id }) {\n    return (\n        <div id={id} className=\"input-container\">\n            <InputDataUpload />\n            <InputReplicateSelection />\n            <InputImputation />\n            <InputComparisonSelection />\n        </div>\n    );\n}\n\nexport default InputContainer;\n","import worker from \"./AnalysisWorker\";\nimport MSExperiment from \"./analysis/MSExperiment\";\n\nexport const FIGURES = {\n    LOG_VIOLIN: \"LOG_VIOLIN\",\n    PRE_POST_IMPUTATION_VIOLIN: \"PRE_POST_IMPUTATION_VIOLIN\",\n    PRE_POST_IMPUTATION_BOXPLOT: \"PRE_POST_IMPUTATION_BOXPLOT\",\n    VOLCANO: \"VOLCANO\",\n    P_VALUE_HISTOGRAM: \"P_VALUE_HISTOGRAM\",\n};\n\nexport async function makePlotlyDataLayout(options) {\n    const { type } = options;\n\n    let ret = { data: [], layout: {} };\n    switch (type) {\n        case FIGURES.LOG_VIOLIN:\n            ret = await makeLogViolin(options);\n            break;\n        case FIGURES.PRE_POST_IMPUTATION_VIOLIN:\n            ret = await makePrePostImputationViolin(options);\n            break;\n        case FIGURES.PRE_POST_IMPUTATION_BOXPLOT:\n            ret = await makePrePostImputationBoxplot(options);\n            break;\n        case FIGURES.VOLCANO:\n            ret = await makeVolcanoPlot(options);\n            break;\n        case FIGURES.P_VALUE_HISTOGRAM:\n            ret = await makePValueHistogram(options);\n            break;\n    }\n    ret.layout.autosize = true;\n\n    return ret;\n}\n\nasync function makeLogViolin({ samples, conditions }) {\n    const makeViolinTrace = (trace) => {\n        return Object.assign(trace, {\n            type: \"violin\",\n            width: 1,\n            points: false,\n        });\n    };\n\n    let ret = { data: [], layout: {} };\n    if (samples != undefined && conditions == undefined) {\n        ret = {\n            data: await Promise.all(\n                samples.map((sample) =>\n                    worker\n                        .getData(\n                            `LFQ intensity ${sample}`,\n                            MSExperiment.SNAPSHOT_KEYS.LOG_TRANSFORM\n                        )\n                        .then((data) =>\n                            makeViolinTrace({\n                                x: data,\n                                y0: sample,\n                                side: \"positive\",\n                            })\n                        )\n                )\n            ),\n            layout: {},\n        };\n    } else if (samples == undefined && conditions != undefined) {\n        const replicates = await worker.getReplicates();\n        ret = {\n            data: await Promise.all(\n                conditions.map((condition) =>\n                    Promise.all(\n                        replicates\n                            .get(condition)\n                            .map((sample) =>\n                                worker.getData(\n                                    `LFQ intensity ${sample}`,\n                                    MSExperiment.SNAPSHOT_KEYS\n                                        .MEDIAN_NORMALIZATION\n                                )\n                            )\n                    )\n                        .then((array) => array.flat())\n                        .then((data) =>\n                            makeViolinTrace({\n                                x: data,\n                                y0: condition,\n                                side: \"positive\",\n                            })\n                        )\n                )\n            ),\n            layout: {},\n        };\n    }\n\n    Object.assign(ret.layout, {\n        title: \"log2 intensities\",\n        showlegend: false,\n        xaxis: {\n            title: \"log2 intensity\",\n        },\n        yaxis: {\n            automargin: true,\n        },\n    });\n    return ret;\n}\n\nasync function makePrePostImputationViolin({ samples, conditions }) {\n    const makeViolinTrace = (trace) => {\n        return Object.assign(trace, {\n            type: \"violin\",\n            width: 1,\n            points: false,\n        });\n    };\n\n    let ret = { data: [], layout: {} };\n    if (samples != undefined && conditions == undefined) {\n        ret = {\n            data: await Promise.all([\n                ...samples.map((sample) =>\n                    worker\n                        .getData(\n                            `LFQ intensity ${sample}`,\n                            MSExperiment.SNAPSHOT_KEYS.MEDIAN_NORMALIZATION\n                        )\n                        .then((data) =>\n                            makeViolinTrace({\n                                name: \"pre\",\n                                x: data,\n                                y0: sample,\n                                legendgroup: \"pre\",\n                                side: \"positive\",\n                                line: {\n                                    color: \"#1f77b4\",\n                                },\n                            })\n                        )\n                ),\n                ...samples.map((sample) =>\n                    worker\n                        .getData(\n                            `LFQ intensity ${sample}`,\n                            MSExperiment.SNAPSHOT_KEYS.IMPUTE_MISSING_VALUES\n                        )\n                        .then((data) =>\n                            makeViolinTrace({\n                                name: \"post\",\n                                x: data,\n                                y0: sample,\n                                legendgroup: \"post\",\n                                side: \"negative\",\n                                line: {\n                                    color: \"#ff7f0e\",\n                                },\n                            })\n                        )\n                ),\n            ]),\n            layout: {},\n        };\n    } else if (samples == undefined && conditions != undefined) {\n        const replicates = await worker.getReplicates();\n        ret = {\n            data: await Promise.all([\n                ...conditions.map((condition) =>\n                    Promise.all(\n                        replicates\n                            .get(condition)\n                            .map((sample) =>\n                                worker.getData(\n                                    `LFQ intensity ${sample}`,\n                                    MSExperiment.SNAPSHOT_KEYS\n                                        .MEDIAN_NORMALIZATION\n                                )\n                            )\n                    )\n                        .then((array) => array.flat())\n                        .then((data) =>\n                            makeViolinTrace({\n                                name: \"pre\",\n                                x: data,\n                                y0: condition,\n                                legendgroup: \"pre\",\n                                side: \"positive\",\n                                line: {\n                                    color: \"#1f77b4\",\n                                },\n                            })\n                        )\n                ),\n                ...conditions.map((condition) =>\n                    Promise.all(\n                        replicates\n                            .get(condition)\n                            .map((sample) =>\n                                worker.getData(\n                                    `LFQ intensity ${sample}`,\n                                    MSExperiment.SNAPSHOT_KEYS\n                                        .IMPUTE_MISSING_VALUES\n                                )\n                            )\n                    )\n                        .then((array) => array.flat())\n                        .then((data) =>\n                            makeViolinTrace({\n                                name: \"post\",\n                                x: data,\n                                y0: condition,\n                                legendgroup: \"post\",\n                                side: \"negative\",\n                                line: {\n                                    color: \"#ff7f0e\",\n                                },\n                            })\n                        )\n                ),\n            ]),\n            layout: {},\n        };\n    }\n\n    Object.assign(ret.layout, {\n        title: \"log2 intensities pre- and post-imputation\",\n        xaxis: {\n            title: \"log2 intensity\",\n        },\n        yaxis: {\n            automargin: true,\n        },\n    });\n    return ret;\n}\n\nasync function makePrePostImputationBoxplot({ samples, conditions }) {\n    const makeBoxplotTrace = (trace) => {\n        return Object.assign(trace, {\n            type: \"box\",\n        });\n    };\n\n    let ret = { data: [], layout: {} };\n    if (samples != undefined && conditions == undefined) {\n        ret = {\n            data: await Promise.all([\n                ...samples.map((sample) =>\n                    worker\n                        .getData(\n                            `LFQ intensity ${sample}`,\n                            MSExperiment.SNAPSHOT_KEYS.MEDIAN_NORMALIZATION\n                        )\n                        .then((data) =>\n                            makeBoxplotTrace({\n                                name: \"pre\",\n                                y: data,\n                                x0: sample,\n                                legendgroup: \"pre\",\n                                marker: {\n                                    color: \"#1f77b4\",\n                                },\n                            })\n                        )\n                ),\n                ...samples.map((sample) =>\n                    worker\n                        .getData(\n                            `LFQ intensity ${sample}`,\n                            MSExperiment.SNAPSHOT_KEYS.IMPUTE_MISSING_VALUES\n                        )\n                        .then((data) =>\n                            makeBoxplotTrace({\n                                name: \"post\",\n                                y: data,\n                                x0: sample,\n                                legendgroup: \"post\",\n                                marker: {\n                                    color: \"#ff7f0e\",\n                                },\n                            })\n                        )\n                ),\n            ]),\n            layout: {},\n        };\n    } else if (samples == undefined && conditions != undefined) {\n        const replicates = await worker.getReplicates();\n        ret = {\n            data: await Promise.all([\n                ...conditions.map((condition) =>\n                    Promise.all(\n                        replicates\n                            .get(condition)\n                            .map((sample) =>\n                                worker.getData(\n                                    `LFQ intensity ${sample}`,\n                                    MSExperiment.SNAPSHOT_KEYS\n                                        .MEDIAN_NORMALIZATION\n                                )\n                            )\n                    )\n                        .then((array) => array.flat())\n                        .then((data) =>\n                            makeBoxplotTrace({\n                                name: \"pre\",\n                                y: data,\n                                x0: condition,\n                                legendgroup: \"pre\",\n                                marker: {\n                                    color: \"#1f77b4\",\n                                },\n                            })\n                        )\n                ),\n                ...conditions.map((condition) =>\n                    Promise.all(\n                        replicates\n                            .get(condition)\n                            .map((sample) =>\n                                worker.getData(\n                                    `LFQ intensity ${sample}`,\n                                    MSExperiment.SNAPSHOT_KEYS\n                                        .IMPUTE_MISSING_VALUES\n                                )\n                            )\n                    )\n                        .then((array) => array.flat())\n                        .then((data) =>\n                            makeBoxplotTrace({\n                                name: \"post\",\n                                y: data,\n                                x0: condition,\n                                legendgroup: \"post\",\n                                marker: {\n                                    color: \"#ff7f0e\",\n                                },\n                            })\n                        )\n                ),\n            ]),\n            layout: {},\n        };\n    }\n\n    Object.assign(ret.layout, {\n        title: \"log2 intensities pre- and post-imputation\",\n        xaxis: {\n            automargin: true,\n        },\n        yaxis: {\n            title: \"log2 intensity\",\n        },\n        boxmode: \"group\",\n        boxgap: -1,\n        boxgroupgap: 0,\n    });\n    return ret;\n}\n\nasync function makeVolcanoPlot({ comparisons, highlightGenes }) {\n    if (!comparisons) return { data: [], layout: {} };\n    const highlightGeneSet = new Set(\n        (highlightGenes || []).map((g) => g.toLowerCase())\n    );\n    return {\n        data: [\n            await Promise.all([\n                worker.getComparisonData(comparisons, \"log FC\"),\n                worker.getComparisonData(comparisons, \"adjusted p value\"),\n                worker.getComparisonData(comparisons, \"gene\"),\n                worker.getComparisonData(comparisons, \"significant\"),\n            ]).then(([logfc, pvalues, genes, significant]) => {\n                return {\n                    type: \"scattergl\",\n                    mode: \"markers\",\n                    x: logfc,\n                    y: pvalues.map((p) => -1 * Math.log10(p)),\n                    hovertext: genes,\n                    marker: {\n                        color:\n                            highlightGeneSet.size === 0\n                                ? significant.map((sig) =>\n                                      sig === \"yes\" ? 1 : 0\n                                  )\n                                : genes.map((g) =>\n                                      highlightGeneSet.has(g.toLowerCase())\n                                          ? 1\n                                          : 0\n                                  ),\n                    },\n                };\n            }),\n        ],\n        layout: {\n            title: `${comparisons[1]} vs. ${comparisons[0]}`,\n            xaxis: {\n                title: `log2 (${comparisons[1]} / ${comparisons[0]})`,\n            },\n            yaxis: {\n                title: \"-log10 (p_adjusted)\",\n            },\n        },\n    };\n}\n\nasync function makePValueHistogram({ comparisons }) {\n    if (!comparisons) return { data: [], layout: {} };\n    return {\n        data: [\n            {\n                type: \"histogram\",\n                name: \"p value\",\n                x: await worker.getComparisonData(comparisons, \"p value\"),\n                opacity: 0.5,\n                xbins: {\n                    start: 0,\n                    end: 1,\n                    size: 0.025,\n                },\n            },\n            {\n                type: \"histogram\",\n                name: \"adjusted p value\",\n                x: await worker.getComparisonData(\n                    comparisons,\n                    \"adjusted p value\"\n                ),\n                opacity: 0.5,\n                xbins: {\n                    start: 0,\n                    end: 1,\n                    size: 0.025,\n                },\n            },\n        ],\n        layout: {\n            title: `${comparisons[1]} vs. ${comparisons[0]} p values`,\n            barmode: \"overlay\",\n            xaxis: {\n                title: \"p\",\n            },\n            yaxis: {\n                title: \"count\",\n            },\n        },\n    };\n}\n","import React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport { connect } from \"react-redux\";\nimport { makePlotlyDataLayout } from \"../Figures\";\n\nfunction MainPanelContainer({ id, figureOptions }) {\n    const [plot, setPlot] = React.useState({\n        data: [],\n        layout: {\n            autosize: true,\n        },\n    });\n\n    React.useEffect(async () => {\n        if (figureOptions) setPlot(await makePlotlyDataLayout(figureOptions));\n    }, [figureOptions]);\n\n    if (plot) {\n        return (\n            <div id={id} className=\"main-container\">\n                <Plot\n                    className=\"main-plot\"\n                    data={plot.data}\n                    layout={plot.layout}\n                    useResizeHandler\n                    style={{\n                        width: \"100%\",\n                        height: \"100%\",\n                    }}\n                    divId=\"mainpanel-figure\"\n                />\n            </div>\n        );\n    }\n    return \"loading...\";\n}\n\nexport default connect((state) => {\n    return {\n        figureOptions: state.view.figureOptions,\n    };\n}, null)(MainPanelContainer);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport worker from \"../AnalysisWorker\";\n\nimport MUIDataTable from \"mui-datatables\";\n\nfunction SidePanelContainer({ id, samples, figureOptions }) {\n    const [data, setData] = React.useState();\n\n    React.useEffect(async () => {\n        if (figureOptions.comparisons)\n            setData(\n                await worker.getComparisonsTable(figureOptions.comparisons)\n            );\n    }, [figureOptions.comparisons]);\n\n    return (\n        <div id={id}>\n            <MUIDataTable\n                title={\n                    figureOptions.comparisons\n                        ? `${figureOptions.comparisons[1]} vs. ${figureOptions.comparisons[0]}`\n                        : \"no data: make and select a comparison\"\n                }\n                data={data}\n                columns={data ? Object.keys(data[0]) : []}\n                options={{\n                    selectableRows: \"none\",\n                }}\n            />\n        </div>\n    );\n}\n\nexport default connect((state) => {\n    return {\n        figureOptions: state.view.figureOptions,\n    };\n}, null)(SidePanelContainer);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FIGURES } from \"../Figures\";\n\nimport \"./FigureOptions.css\";\n\nfunction FigureOptions({\n    samples,\n    conditions,\n    comparisons,\n    figureType,\n    onOptionsChange,\n}) {\n    const [sampleCondition, setSampleCondition] = React.useState(\"samples\");\n\n    let options;\n    switch (figureType) {\n        case FIGURES.LOG_VIOLIN:\n        case FIGURES.PRE_POST_IMPUTATION_VIOLIN:\n        case FIGURES.PRE_POST_IMPUTATION_BOXPLOT:\n            const onFigureTypeChange = (e) => {\n                setSampleCondition(e.currentTarget.value);\n                onOptionsChange({\n                    samples: undefined,\n                    conditions: undefined,\n                });\n            };\n\n            options = (\n                <>\n                    <div>\n                        <input\n                            type=\"radio\"\n                            id=\"figureTypeSamples\"\n                            name=\"figureType\"\n                            value=\"samples\"\n                            checked={sampleCondition === \"samples\"}\n                            onChange={onFigureTypeChange}\n                        />\n                        <label htmlFor=\"figureTypeSamples\">Samples</label>\n                        <br />\n                        <input\n                            type=\"radio\"\n                            id=\"figureTypeConditions\"\n                            name=\"figureType\"\n                            value=\"conditions\"\n                            checked={sampleCondition === \"conditions\"}\n                            onChange={onFigureTypeChange}\n                        />\n                        <label htmlFor=\"figureTypeConditions\">Conditions</label>\n                    </div>\n                    <select\n                        className=\"sample-condition-selector\"\n                        multiple\n                        onChange={(e) => {\n                            onOptionsChange({\n                                [sampleCondition]: Array.from(\n                                    e.target.selectedOptions\n                                ).map((opt) => opt.value),\n                            });\n                        }}\n                    >\n                        {{ samples, conditions }[sampleCondition].map(\n                            (name) => (\n                                <option value={name} key={name}>\n                                    {name}\n                                </option>\n                            )\n                        )}\n                    </select>\n                </>\n            );\n            break;\n        case FIGURES.VOLCANO:\n        case FIGURES.P_VALUE_HISTOGRAM:\n            options = (\n                <>\n                    <select\n                        className=\"comparison-selector\"\n                        multiple\n                        onChange={(e) => {\n                            onOptionsChange({\n                                comparisons: JSON.parse(e.target.value),\n                            });\n                        }}\n                    >\n                        {Object.entries(comparisons || {})\n                            .map(([conditionA, value]) =>\n                                value.map((conditionB) => (\n                                    <option\n                                        value={JSON.stringify([\n                                            conditionA,\n                                            conditionB,\n                                        ])}\n                                        key={JSON.stringify([\n                                            conditionA,\n                                            conditionB,\n                                        ])}\n                                    >\n                                        {conditionB} vs. {conditionA}\n                                    </option>\n                                ))\n                            )\n                            .flat()}\n                    </select>\n                    <textarea\n                        className=\"highlight-genes-textbox\"\n                        placeholder=\"highlight genes in volcano plot (case insensitive); one gene per line\"\n                        onChange={(e) =>\n                            onOptionsChange({\n                                highlightGenes: e.target.value\n                                    .split(\"\\n\")\n                                    .filter((g) => g !== \"\"),\n                            })\n                        }\n                    ></textarea>\n                </>\n            );\n            break;\n    }\n\n    return <div className=\"figure-sample-condition-selector\">{options}</div>;\n}\n\nexport default connect((state) => {\n    return {\n        samples: state.input.samples,\n        conditions: state.input.conditions,\n        comparisons: state.input.comparisons,\n    };\n}, null)(FigureOptions);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FIGURES } from \"../Figures\";\nimport { downloadData, saveFigure } from \"../RunAnalysis\";\nimport { ACTIONS, createAction } from \"../store/actions\";\n\nimport FigureOptions from \"./FigureOptions\";\n\nimport \"./ViewContainer.css\";\n\nfunction ViewContainer({ id, onOptionsSet, onDownloadClick, onSavePlotClick }) {\n    const [figureOptions, setFigureOptions] = React.useState({});\n\n    return (\n        <div id={id} className=\"view-container\">\n            <p>Select data to view.</p>\n            <div className=\"figure-options\">\n                {/* select figure type */}\n                <select\n                    onChange={(e) => {\n                        setFigureOptions(\n                            Object.assign({}, figureOptions, {\n                                type: e.target.value,\n                            })\n                        );\n                    }}\n                    defaultValue=\"default\"\n                >\n                    {[\n                        <option disabled value=\"default\" key=\"default\">\n                            -- select an option --\n                        </option>,\n                        ...Object.keys(FIGURES).map((fig) => (\n                            <option value={fig} key={fig}>\n                                {fig}\n                            </option>\n                        )),\n                    ]}\n                </select>\n\n                {/* select figure options */}\n                <FigureOptions\n                    figureType={figureOptions.type}\n                    onOptionsChange={(changedOptions) =>\n                        setFigureOptions(\n                            Object.assign({}, figureOptions, changedOptions)\n                        )\n                    }\n                />\n\n                {/* set options */}\n                <button onClick={() => onOptionsSet(figureOptions)}>\n                    View data\n                </button>\n\n                <button onClick={onDownloadClick}>Download data</button>\n                <button onClick={onSavePlotClick}>Download figure</button>\n            </div>\n        </div>\n    );\n}\n\nexport default connect(null, (dispatch) => {\n    return {\n        onOptionsSet: (figureOptions) => {\n            dispatch(\n                createAction(ACTIONS.SET_VIEW_FIGURE_OPTIONS, figureOptions)\n            );\n        },\n        onDownloadClick: () => {\n            dispatch(downloadData());\n        },\n        onSavePlotClick: () => {\n            dispatch(saveFigure());\n        },\n    };\n})(ViewContainer);\n","import \"./App.css\";\nimport InputContainer from \"./InputContainer\";\nimport MainPanelContainer from \"./MainPanelContainer\";\nimport SidePanelContainer from \"./SidePanelContainer\";\nimport ViewContainer from \"./ViewContainer.js\";\n\nfunction App() {\n    return (\n        <div id=\"app-container\">\n            <InputContainer id=\"input-container\" />\n            <ViewContainer id=\"view-container\" />\n            <SidePanelContainer id=\"sidepanel-container\" />\n            <MainPanelContainer id=\"mainpanel-container\" />\n        </div>\n    );\n}\n\nexport default App;\n","import { applyMiddleware, createStore, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { ACTIONS } from \"./actions\";\n\nconst initialState = {\n    input: {\n        samples: [],\n        conditions: [],\n    },\n    view: {\n        figureOptions: {},\n    },\n    side: {},\n    main: {},\n};\n\nfunction inputReducer(state, action) {\n    switch (action.type) {\n        case ACTIONS.SET_INPUT_SAMPLES:\n            return Object.assign({}, state, {\n                samples: action.data,\n            });\n        case ACTIONS.SET_INPUT_CONDITIONS:\n            return Object.assign({}, state, {\n                conditions: action.data,\n            });\n        case ACTIONS.SET_INPUT_COMPARISONS:\n            return Object.assign({}, state, {\n                comparisons: action.data,\n            });\n    }\n    return state;\n}\n\nfunction viewReducer(state, action) {\n    switch (action.type) {\n        case ACTIONS.SET_VIEW_FIGURE_OPTIONS:\n            return Object.assign({}, state, {\n                figureOptions: action.data,\n            });\n    }\n    return state;\n}\n\nfunction rootReducer(state = initialState, action) {\n    const cpy = { ...state };\n    switch (action.type) {\n        case ACTIONS.SET_INPUT_SAMPLES:\n        case ACTIONS.SET_INPUT_CONDITIONS:\n        case ACTIONS.SET_INPUT_COMPARISONS:\n            cpy.input = inputReducer(state.input, action);\n            break;\n        case ACTIONS.SET_VIEW_FIGURE_OPTIONS:\n            cpy.view = viewReducer(state.view, action);\n            break;\n    }\n    return cpy;\n}\n\nconst composeEnhancers =\n    (typeof window !== \"undefined\" &&\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n    compose;\n\nexport default createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(thunk))\n);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport store from \"./store/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n"],"sourceRoot":""}
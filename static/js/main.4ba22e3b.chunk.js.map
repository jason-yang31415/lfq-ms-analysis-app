{"version":3,"sources":["AnalysisWorker.js","worker.js","store/actions.js","components/InputDataUpload.js","RunAnalysis.js","components/InputReplicateSelection.js","components/InputComparisonSelection.js","components/InputContainer.js","analysis/utils.js","analysis/MSExperiment.js","Figures.js","components/MainPanelContainer.js","components/SidePanelContainer.js","components/FigureOptions.js","components/ViewContainer.js","components/App.js","store/store.js","index.js"],"names":["worker","wrap","Worker","ACTIONS","createAction","type","data","connect","dispatch","onDataUpload","file","Response","arrayBuffer","then","ab","transfer","getSamples","samples","htmlFor","id","name","onInput","e","target","files","Modal","setAppElement","state","input","onReplicatesSelect","conditions","Object","keys","React","useState","replicatesModalOpen","setReplicatesModalOpen","selectedReplicates","setSelectedReplicates","conditionName","setConditionName","setConditions","onClick","isOpen","style","overlay","zIndex","multiple","onChange","Array","from","selectedOptions","map","opt","value","sample","length","assign","entries","condition","replicates","join","onComparisonSelect","comparisons","comparisonsObj","reduce","obj","get","onComparisonsSelect","comparisonModalOpen","setComparisonModalOpen","Map","conditionA","conditionB","selected","has","set","Set","add","delete","onComparisonChange","checked","disabled","InputContainer","className","pAdjust","pvalues","p","index","sort","a","b","i","padj","Math","min","entry","MSExperiment","this","rawData","snapshots","removeContaminants","bind","logTransform","removeAllNaN","setReplicates","console","log","where","row","subset","COMMON_COLUMNS","bake","SNAPSHOT_KEYS","REMOVE_CONTAMINANTS","DataFrame","columns","column","getSeries","select","log2","NaN","getIndex","LOG_TRANSFORM","every","isNaN","medians","Number","median","maxMedian","max","apply","values","MEDIAN_NORMALIZATION","clear","series","mean","average","stdev","std","random","uniform","IMPUTE_MISSING_VALUES","comparisonData","zip","toArray","arrA","arrB","meanA","jstat","meanB","pvalue","arr1","arr2","m1","m2","s1","s2","se","sqrt","pow","df","floor","t","studentt","cdf","abs","ttest","withSeries","withIndex","Series","FIGURES","PRE_POST_IMPUTATION_VIOLIN","PRE_POST_IMPUTATION_BOXPLOT","VOLCANO","P_VALUE_HISTOGRAM","makePlotlyDataLayout","options","ret","layout","makePrePostImputationViolin","makePrePostImputationBoxplot","makeVolcanoPlot","makePValueHistogram","autosize","makeViolinTrace","trace","width","points","undefined","Promise","all","getData","x","y0","legendgroup","side","getReplicates","array","flat","title","yaxis","automargin","makeBoxplotTrace","y","x0","xaxis","boxmode","boxgap","boxgroupgap","highlightGenes","highlightGeneSet","g","toLowerCase","getComparisonData","logfc","genes","mode","log10","hovertext","marker","color","start","end","size","opacity","xbins","barmode","figureOptions","view","plot","setPlot","useEffect","useResizeHandler","height","setData","getComparisonsTable","selectableRows","figureType","onOptionsChange","sampleCondition","setSampleCondition","onFigureTypeChange","currentTarget","JSON","parse","stringify","split","filter","onOptionsSet","onDownloadClick","downloadData","blob","Blob","link","document","createElement","href","window","URL","createObjectURL","download","click","setFigureOptions","defaultValue","fig","changedOptions","App","initialState","main","inputReducer","action","viewReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","cpy","applyMiddleware","thunk","ReactDOM","render","StrictMode","store","getElementById"],"mappings":"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","file":"static/js/main.4ba22e3b.chunk.js","sourcesContent":["/* eslint-disable import/no-webpack-loader-syntax */\nimport Worker from \"worker-loader!./worker.js\";\nimport { wrap } from \"comlink\";\n\n// instantiate worker for analysis\nconst worker = wrap(new Worker());\nexport default worker;\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/worker.223b8333.worker.js\");\n}\n","export const ACTIONS = {\n    SET_INPUT_SAMPLES: \"SET_INPUT_SAMPLES\",\n    SET_INPUT_CONDITIONS: \"SET_INPUT_CONDITIONS\",\n    SET_INPUT_COMPARISONS: \"SET_INPUT_COMPARISONS\",\n    SET_VIEW_FIGURE_OPTIONS: \"SET_VIEW_FIGURE_OPTIONS\",\n};\n\nexport function createAction(type, data) {\n    return {\n        type,\n        data,\n    };\n}\n","import { connect } from \"react-redux\";\nimport { onDataUpload } from \"../RunAnalysis\";\n\nfunction InputDataUpload({ onDataUpload }) {\n    return (\n        <div>\n            <label htmlFor=\"dataUpload\">Upload data: </label>\n            <input\n                type=\"file\"\n                id=\"dataUpload\"\n                name=\"dataUpload\"\n                onInput={(e) => onDataUpload(e.target.files[0])}\n            />\n        </div>\n    );\n}\n\nexport default connect(null, (dispatch) => {\n    return {\n        onDataUpload: (file) => {\n            dispatch(onDataUpload(file));\n        },\n    };\n})(InputDataUpload);\n","import worker from \"./AnalysisWorker\";\nimport { transfer } from \"comlink\";\nimport { ACTIONS, createAction } from \"./store/actions\";\n\n/**\n * This file interfaces between UI and analysis. UI changes are handled on the\n * main thread (this file) while analysis is handled in a worker (see\n * worker.js); each function calls the equivalent function in the worker, via\n * comlink proxy, to handle the analysis aspect off of the main thread.\n */\n\nexport function onDataUpload(file) {\n    return (dispatch) => {\n        new Response(file)\n            // wrap file blob in response to read data as array buffer\n            .arrayBuffer()\n            // transfer array buffer to worker for processing and analysis\n            .then((ab) => {\n                return worker.onDataUpload(transfer(ab, [ab]));\n            })\n            // retrieve sample names\n            .then(() => {\n                return worker.getSamples();\n            })\n            // update UI with sample names\n            .then((samples) => {\n                dispatch(createAction(ACTIONS.SET_INPUT_SAMPLES, samples));\n            });\n    };\n}\n\nexport function onReplicatesSelect(conditions) {\n    return (dispatch) => {\n        // transfer conditions object to worker for processing\n        worker.onReplicatesSelect(conditions).then(() => {\n            // update UI with condition names\n            dispatch(\n                createAction(\n                    ACTIONS.SET_INPUT_CONDITIONS,\n                    Object.keys(conditions)\n                )\n            );\n        });\n    };\n}\n\nexport function onComparisonsSelect(comparisons) {\n    return (dispatch) => {\n        // transfer comparisons object to worker for processing\n        worker.onComparisonsSelect(comparisons).then(() => {\n            dispatch(createAction(ACTIONS.SET_INPUT_COMPARISONS, comparisons));\n        });\n    };\n}\n\nexport function downloadData() {\n    return (dispatch) => {\n        // get bytes to save as excel file from worker\n        worker.downloadData().then((data) => {\n            // make new blob and link pointing to blob, click to save file\n            const blob = new Blob([data], { type: \"application/vnd.ms-excel\" });\n            const link = document.createElement(\"a\");\n            link.href = window.URL.createObjectURL(blob);\n            link.download = \"results.xlsx\";\n            link.click();\n        });\n    };\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Modal from \"react-modal\";\n\nimport \"./InputReplicateSelection.css\";\nimport { onReplicatesSelect } from \"../RunAnalysis\";\n\nModal.setAppElement(\"#root\");\n\nfunction InputReplicateSelection({ samples, onReplicatesSelect }) {\n    const [replicatesModalOpen, setReplicatesModalOpen] = React.useState(false);\n    const [selectedReplicates, setSelectedReplicates] = React.useState([]);\n    const [conditionName, setConditionName] = React.useState(\"\");\n    const [conditions, setConditions] = React.useState({});\n\n    const onAddCondition = () => {\n        if (conditionName.length === 0) return;\n        setConditions(\n            Object.assign({}, conditions, {\n                [conditionName]: selectedReplicates,\n            })\n        );\n        setConditionName(\"\");\n    };\n\n    const onOKClick = () => {\n        onReplicatesSelect(conditions);\n        setReplicatesModalOpen(false);\n    };\n\n    return (\n        <div>\n            <button onClick={() => setReplicatesModalOpen(true)}>\n                Select replicates\n            </button>\n            <Modal\n                isOpen={replicatesModalOpen}\n                id=\"input-replicate-modal\"\n                style={{\n                    overlay: {\n                        zIndex: 1000,\n                    },\n                }}\n            >\n                <h1 id=\"input-replicate-modal-head\">Select replicates</h1>\n\n                <select\n                    multiple\n                    onChange={(e) => {\n                        setSelectedReplicates(\n                            Array.from(e.target.selectedOptions).map(\n                                (opt) => opt.value\n                            )\n                        );\n                    }}\n                >\n                    {samples.map((sample) => (\n                        <option value={sample} key={sample}>\n                            {sample}\n                        </option>\n                    ))}\n                </select>\n\n                <div>\n                    <label htmlFor=\"conditionName\">Condition name: </label>\n                    <input\n                        type=\"text\"\n                        id=\"conditionName\"\n                        name=\"conditionName\"\n                        value={conditionName}\n                        onChange={(e) => setConditionName(e.target.value)}\n                    />\n                    <br />\n                    <button onClick={onAddCondition}>Add condition</button>\n                    <br />\n                    <button onClick={() => setConditions({})}>\n                        Reset conditions\n                    </button>\n                </div>\n\n                <div>\n                    {Object.entries(conditions).map(\n                        ([condition, replicates]) => (\n                            <p key={condition}>\n                                {condition}: {replicates.join(\", \")}\n                            </p>\n                        )\n                    )}\n                </div>\n\n                <div id=\"input-replicate-modal-foot\">\n                    <button onClick={onOKClick}>OK</button>\n                </div>\n            </Modal>\n        </div>\n    );\n}\n\nexport default connect(\n    (state) => {\n        return {\n            samples: state.input.samples,\n        };\n    },\n    (dispatch) => {\n        return {\n            onReplicatesSelect: (conditions) => {\n                dispatch(onReplicatesSelect(conditions));\n            },\n        };\n    }\n)(InputReplicateSelection);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Modal from \"react-modal\";\n\nimport \"./InputComparisonSelection.css\";\nimport { onComparisonsSelect } from \"../RunAnalysis\";\n\nModal.setAppElement(\"#root\");\n\nfunction InputComparisonSelection({ conditions, onComparisonSelect }) {\n    const [comparisonModalOpen, setComparisonModalOpen] = React.useState(false);\n    /** @type {Map.<string, Set<string>} */\n    const comparisons = new Map();\n\n    const onComparisonChange = (conditionA, conditionB, selected) => {\n        if (selected) {\n            if (!comparisons.has(conditionA))\n                comparisons.set(conditionA, new Set());\n            comparisons.get(conditionA).add(conditionB);\n        } else {\n            if (\n                comparisons.has(conditionA) &&\n                comparisons.get(conditionA).has(conditionB)\n            )\n                comparisons.get(conditionA).delete(conditionB);\n        }\n    };\n\n    const onOKClick = () => {\n        onComparisonSelect(comparisons);\n        setComparisonModalOpen(false);\n    };\n\n    return (\n        <div>\n            <button onClick={() => setComparisonModalOpen(true)}>\n                Select comparisons\n            </button>\n            <Modal\n                isOpen={comparisonModalOpen}\n                id=\"input-comparison-modal\"\n                style={{\n                    overlay: {\n                        zIndex: 1000,\n                    },\n                }}\n            >\n                <h1 id=\"input-comparison-modal-head\">Select comparisons</h1>\n\n                <table>\n                    <tbody>\n                        <tr>\n                            <td></td>\n                            {conditions.map((condition) => (\n                                <td key={`${condition} B`}>{condition}</td>\n                            ))}\n                        </tr>\n                        {conditions.map((conditionA) => (\n                            <tr key={`${conditionA} row`}>\n                                <td key={`${conditionA} A`}>{conditionA}</td>\n                                {conditions.map((conditionB) => (\n                                    <td key={`${conditionA},${conditionB}`}>\n                                        <input\n                                            type=\"checkbox\"\n                                            onChange={(e) =>\n                                                onComparisonChange(\n                                                    conditionA,\n                                                    conditionB,\n                                                    e.target.checked\n                                                )\n                                            }\n                                            disabled={conditionA === conditionB}\n                                        />\n                                    </td>\n                                ))}\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n\n                <div id=\"input-comparison-modal-foot\">\n                    <button onClick={onOKClick}>OK</button>\n                </div>\n            </Modal>\n        </div>\n    );\n}\n\nexport default connect(\n    (state) => {\n        return {\n            conditions: state.input.conditions,\n        };\n    },\n    (dispatch) => {\n        return {\n            onComparisonSelect: (comparisons) => {\n                const comparisonsObj = Array.from(comparisons.keys()).reduce(\n                    (obj, condition) =>\n                        Object.assign(obj, {\n                            [condition]: Array.from(comparisons.get(condition)),\n                        }),\n                    {}\n                );\n                dispatch(onComparisonsSelect(comparisonsObj));\n            },\n        };\n    }\n)(InputComparisonSelection);\n","import \"./InputContainer.css\";\nimport InputDataUpload from \"./InputDataUpload\";\nimport InputReplicateSelection from \"./InputReplicateSelection\";\nimport InputComparisonSelection from \"./InputComparisonSelection\";\n\nfunction InputContainer({ id }) {\n    return (\n        <div id={id} className=\"input-container\">\n            <InputDataUpload />\n            <InputReplicateSelection />\n            <InputComparisonSelection />\n        </div>\n    );\n}\n\nexport default InputContainer;\n","import jstat from \"jstat\";\n\n/**\n * Calculates two-sample Welch's t-test (two tail).\n * @param {number[]} arr1 sample 1\n * @param {number[]} arr2 sample 2\n */\nexport function ttest(arr1, arr2) {\n    const m1 = jstat(arr1).mean();\n    const m2 = jstat(arr2).mean();\n    const s1 = jstat(arr1).stdev(true);\n    const s2 = jstat(arr2).stdev(true);\n    const se = Math.sqrt(\n        Math.pow(s1, 2) / arr1.length + Math.pow(s2, 2) / arr2.length\n    );\n    const df = Math.floor(\n        Math.pow(\n            Math.pow(s1, 2) / arr1.length + Math.pow(s2, 2) / arr2.length,\n            2\n        ) /\n            (Math.pow(s1, 4) / (Math.pow(arr1.length, 2) * (arr1.length - 1)) +\n                Math.pow(s2, 4) /\n                    (Math.pow(arr2.length, 2) * (arr2.length - 1)))\n    );\n    const t = (m2 - m1) / se;\n    const p = 2 * jstat.studentt.cdf(-Math.abs(t), df);\n    return { t, p, df };\n}\n\n/**\n * Adjust p values using Benjamini-Hochberg method (FDR)\n * @param {number[]} pvalues array containing p values\n */\nexport function pAdjust(pvalues) {\n    // enumerate indices for original order, then sort by p value\n    const entries = pvalues\n        .map((p, index) => {\n            return { index, p };\n        })\n        .sort((a, b) => a.p - b.p);\n    // calculate BH corrected p value\n    for (let i = entries.length - 1; i >= 0; i--) {\n        entries[i].padj = Math.min(\n            1,\n            Math.min(\n                (entries.length * entries[i].p) / (i + 1),\n                i < entries.length - 1 ? entries[i + 1].padj : 1\n            )\n        );\n    }\n    // use original order (sort by index) then return adjusted p values\n    return entries.sort((a, b) => a.index - b.index).map((entry) => entry.padj);\n}\n","import { DataFrame, Series } from \"data-forge\";\nimport random from \"random\";\nimport jstat from \"jstat\";\nimport { pAdjust, ttest } from \"./utils\";\n\nclass MSExperiment {\n    /**\n     *\n     * @param {DataFrame} data\n     * @param {string[]} samples\n     */\n    constructor(data, samples) {\n        this.data = data;\n        this.rawData = data;\n        this.samples = samples;\n\n        /** @type {Map<string, DataFrame} */\n        this.snapshots = new Map();\n\n        /** @type {Map<string, string[]>} */\n        this.replicates = new Map();\n\n        /** @type {Map<string, Map<string, DataFrame>>} */\n        this.comparisons = new Map();\n\n        this.removeContaminants = this.removeContaminants.bind(this);\n        this.logTransform = this.logTransform.bind(this);\n        this.removeAllNaN = this.removeAllNaN.bind(this);\n        this.setReplicates = this.setReplicates.bind(this);\n    }\n\n    static SNAPSHOT_KEYS = {\n        REMOVE_CONTAMINANTS: \"REMOVE_CONTAMINANTS\",\n        LOG_TRANSFORM: \"LOG_TRANSFORM\",\n        MEDIAN_NORMALIZATION: \"MEDIAN_NORMALIZATION\",\n        IMPUTE_MISSING_VALUES: \"IMPUTE_MISSING_VALUES\",\n    };\n\n    static COMMON_COLUMNS = [\"id\", \"uniprotID\", \"gene\"];\n\n    /**\n     * Modifies `data` to remove entries with True for \"Potential contaminant\"\n     * or \"Reverse\"\n     */\n    removeContaminants() {\n        console.log(\"removing contaminants\");\n        this.data = this.data\n            // filter by \"Potential contaminant\" and \"Reverse\"\n            .where((row) => !row[\"Potential contaminant\"] && !row[\"Reverse\"])\n            // keep only common columns and \"LFQ intensity ...\" columns\n            .subset([\n                ...MSExperiment.COMMON_COLUMNS,\n                ...this.samples.map((sample) => `LFQ intensity ${sample}`),\n            ])\n            .bake();\n\n        this.snapshots.set(\n            MSExperiment.SNAPSHOT_KEYS.REMOVE_CONTAMINANTS,\n            this.data\n        );\n    }\n\n    /**\n     * Modifies `data` with log2\n     */\n    logTransform() {\n        console.log(\"log transforming\");\n        this.data = new DataFrame({\n            columns: {\n                // copy common columns from current dataframe\n                ...MSExperiment.COMMON_COLUMNS.reduce(\n                    (obj, column) =>\n                        Object.assign(obj, {\n                            [column]: this.data.getSeries(column),\n                        }),\n                    {}\n                ),\n                // log transform LFQ intensity columns\n                ...this.samples.reduce(\n                    (obj, sample) =>\n                        Object.assign(obj, {\n                            [`LFQ intensity ${sample}`]: this.data\n                                .getSeries(`LFQ intensity ${sample}`)\n                                .select((value) =>\n                                    // set to NaN if LFQ intensity is not\n                                    // positive\n                                    value > 0 ? Math.log2(value) : NaN\n                                ),\n                        }),\n                    {}\n                ),\n            },\n            index: this.data.getIndex(),\n        }).bake();\n\n        this.snapshots.set(MSExperiment.SNAPSHOT_KEYS.LOG_TRANSFORM, this.data);\n    }\n\n    /**\n     * Modifies `data` to remove entries with NaN in all samples (i.e.\n     * intensity of 0 in all samples)\n     */\n    removeAllNaN() {\n        console.log(\"removing all NaN\");\n        this.data = this.data\n            // only keep rows where not every sample is NaN\n            .where(\n                (row) =>\n                    !this.samples.every((sample) =>\n                        isNaN(row[`LFQ intensity ${sample}`])\n                    )\n            )\n            .bake();\n    }\n\n    /**\n     * Modifies `data` such that each sample is scaled to have the same median\n     * value, equal to the highest median pre-scaling.\n     */\n    normalizeMedians() {\n        console.log(\"normalizing medians\");\n        // calculate medians of each sample and store in map\n        /** @type {Map<string, number>} */\n        const medians = new Map();\n        this.samples.map((sample) =>\n            medians.set(\n                sample,\n                this.data\n                    .getSeries(`LFQ intensity ${sample}`)\n                    .where((value) => !Number.isNaN(value))\n                    .median()\n            )\n        );\n        const maxMedian = Math.max.apply(null, Array.from(medians.values()));\n\n        this.data = new DataFrame({\n            columns: {\n                // copy common columns from current dataframe\n                ...MSExperiment.COMMON_COLUMNS.reduce(\n                    (obj, column) =>\n                        Object.assign(obj, {\n                            [column]: this.data.getSeries(column),\n                        }),\n                    {}\n                ),\n                // median normalize LFQ intensity columns\n                ...this.samples.reduce(\n                    (obj, sample) =>\n                        Object.assign(obj, {\n                            [`LFQ intensity ${sample}`]: this.data\n                                .getSeries(`LFQ intensity ${sample}`)\n                                .select(\n                                    // scale each sample intensity so that\n                                    // sample median matches the maximum sample\n                                    // median\n                                    (value) =>\n                                        (value * maxMedian) /\n                                        medians.get(sample)\n                                ),\n                        }),\n                    {}\n                ),\n            },\n            index: this.data.getIndex(),\n        }).bake();\n\n        this.snapshots.set(\n            MSExperiment.SNAPSHOT_KEYS.MEDIAN_NORMALIZATION,\n            this.data\n        );\n    }\n\n    /**\n     * Modifies `replicates` to store group replicate samples into conditions\n     * @param {Object.<string, string[]>} replicates object containing\n     * replicate data, where keys are condition names and values are arrays of\n     * sample names\n     */\n    setReplicates(replicates) {\n        this.replicates.clear();\n        for (const [condition, samples] of Object.entries(replicates))\n            this.replicates.set(condition, samples);\n    }\n\n    /**\n     * Modifies `data` to replace NA's (intensity of 0) with imputed values.\n     * Imputed values are drawn from a uniform distribution of log2 intensities\n     * ranging from -3 * sigma to -2 * sigma among non-NA log2 intensity\n     * values within the same sample.\n     */\n    imputeMissingValues() {\n        console.log(\"imputing missing values\");\n        this.data = new DataFrame({\n            columns: {\n                // copy common columns from current dataframe\n                ...MSExperiment.COMMON_COLUMNS.reduce(\n                    (obj, column) =>\n                        Object.assign(obj, {\n                            [column]: this.data.getSeries(column),\n                        }),\n                    {}\n                ),\n                // perform imputation on LFQ intensity columns\n                ...this.samples.reduce((obj, sample) => {\n                    // compute mean and standard deviation of non-NaN log\n                    // intensity values for the sample\n                    const series = this.data\n                        .getSeries(`LFQ intensity ${sample}`)\n                        .where((value) => !Number.isNaN(value))\n                        .bake();\n                    const mean = series.average();\n                    const stdev = series.std();\n                    obj[`LFQ intensity ${sample}`] = this.data\n                        .getSeries(`LFQ intensity ${sample}`)\n                        .select(\n                            // replace NaN's with random values drawn from\n                            // uniform distribution\n                            (value) =>\n                                Number.isNaN(value)\n                                    ? random.uniform(\n                                          mean - 3 * stdev,\n                                          mean - 2 * stdev\n                                      )()\n                                    : value\n                        );\n                    return obj;\n                }, {}),\n            },\n            index: this.data.getIndex(),\n        }).bake();\n\n        this.snapshots.set(\n            MSExperiment.SNAPSHOT_KEYS.IMPUTE_MISSING_VALUES,\n            this.data\n        );\n    }\n\n    /**\n     * Makes specified comparisons and stores results in `comparisons.\n     * @param {Object.<string, string[]>} comparisons object containing\n     * comparisons to make, with condition A as key and condition B in values\n     * array\n     */\n    makeComparisons(comparisons) {\n        console.log(\"making comparisons\");\n        // loop through comparisons and set up `comparisons` map\n        for (const [conditionA, value] of Object.entries(comparisons)) {\n            if (!this.comparisons.has(conditionA))\n                this.comparisons.set(conditionA, new Map());\n\n            for (const conditionB of value) {\n                const comparisonData = DataFrame.zip(\n                    // for conditionA and conditionB, zip LFQ intensity columns\n                    // to make a column containing arrays of intensities from\n                    // replicates for that condition\n                    [conditionA, conditionB].map((condition) =>\n                        DataFrame.zip(\n                            this.replicates\n                                .get(condition)\n                                .map((sample) =>\n                                    this.data.getSeries(\n                                        `LFQ intensity ${sample}`\n                                    )\n                                ),\n                            // zip multiple replicate columns into single\n                            // column containing array of values\n                            (values) => values.toArray()\n                        )\n                    ),\n                    // zip conditionA and conditionB columns of arrays arrA and\n                    // arrB\n                    ([arrA, arrB]) => {\n                        // calculate means of conditionA and conditionB\n                        // intensities\n                        const meanA = jstat(arrA).mean();\n                        const meanB = jstat(arrB).mean();\n                        // perform two-sample two-tailed t test (Welch) using\n                        // arrays of intensities to get p value\n                        const pvalue = ttest(arrA, arrB).p;\n                        return {\n                            [`mean ${conditionA}`]: meanA,\n                            [`mean ${conditionB}`]: meanB,\n                            \"log FC\": meanB - meanA,\n                            \"p value\": pvalue,\n                        };\n                    }\n                )\n                    // copy common columns\n                    .withSeries(\n                        MSExperiment.COMMON_COLUMNS.reduce(\n                            (obj, column) =>\n                                Object.assign(obj, {\n                                    [column]: this.data.getSeries(column),\n                                }),\n                            {}\n                        )\n                    )\n                    .withIndex(this.data.getIndex())\n                    .bake()\n                    .withSeries({\n                        \"adjusted p value\": (df) =>\n                            new Series({\n                                index: df.getIndex(),\n                                values: pAdjust(\n                                    df.getSeries(\"p value\").toArray()\n                                ),\n                            }),\n                    })\n                    .bake();\n\n                // put comparison dataframe into `comparisons` map\n                this.comparisons\n                    .get(conditionA)\n                    .set(conditionB, comparisonData);\n            }\n        }\n    }\n}\n\nexport default MSExperiment;\n","import worker from \"./AnalysisWorker\";\nimport MSExperiment from \"./analysis/MSExperiment\";\n\nexport const FIGURES = {\n    PRE_POST_IMPUTATION_VIOLIN: \"PRE_POST_IMPUTATION_VIOLIN\",\n    PRE_POST_IMPUTATION_BOXPLOT: \"PRE_POST_IMPUTATION_BOXPLOT\",\n    VOLCANO: \"VOLCANO\",\n    P_VALUE_HISTOGRAM: \"P_VALUE_HISTOGRAM\",\n};\n\nexport async function makePlotlyDataLayout(options) {\n    const { type } = options;\n\n    let ret = { data: [], layout: {} };\n    switch (type) {\n        case FIGURES.PRE_POST_IMPUTATION_VIOLIN:\n            ret = await makePrePostImputationViolin(options);\n            break;\n        case FIGURES.PRE_POST_IMPUTATION_BOXPLOT:\n            ret = await makePrePostImputationBoxplot(options);\n            break;\n        case FIGURES.VOLCANO:\n            ret = await makeVolcanoPlot(options);\n            break;\n        case FIGURES.P_VALUE_HISTOGRAM:\n            ret = await makePValueHistogram(options);\n            break;\n    }\n    ret.layout.autosize = true;\n\n    return ret;\n}\n\nasync function makePrePostImputationViolin({ samples, conditions }) {\n    const makeViolinTrace = (trace) => {\n        return Object.assign(trace, {\n            type: \"violin\",\n            width: 1,\n            points: false,\n        });\n    };\n\n    let ret = { data: [], layout: {} };\n    if (samples != undefined && conditions == undefined) {\n        ret = {\n            data: await Promise.all([\n                ...samples.map((sample) =>\n                    worker\n                        .getData(\n                            `LFQ intensity ${sample}`,\n                            MSExperiment.SNAPSHOT_KEYS.MEDIAN_NORMALIZATION\n                        )\n                        .then((data) =>\n                            makeViolinTrace({\n                                name: \"pre\",\n                                x: data,\n                                y0: sample,\n                                legendgroup: \"pre\",\n                                side: \"positive\",\n                            })\n                        )\n                ),\n                ...samples.map((sample) =>\n                    worker\n                        .getData(\n                            `LFQ intensity ${sample}`,\n                            MSExperiment.SNAPSHOT_KEYS.IMPUTE_MISSING_VALUES\n                        )\n                        .then((data) =>\n                            makeViolinTrace({\n                                name: \"post\",\n                                x: data,\n                                y0: sample,\n                                legendgroup: \"post\",\n                                side: \"negative\",\n                            })\n                        )\n                ),\n            ]),\n            layout: {},\n        };\n    } else if (samples == undefined && conditions != undefined) {\n        const replicates = await worker.getReplicates();\n        ret = {\n            data: await Promise.all([\n                ...conditions.map((condition) =>\n                    Promise.all(\n                        replicates\n                            .get(condition)\n                            .map((sample) =>\n                                worker.getData(\n                                    `LFQ intensity ${sample}`,\n                                    MSExperiment.SNAPSHOT_KEYS\n                                        .MEDIAN_NORMALIZATION\n                                )\n                            )\n                    )\n                        .then((array) => array.flat())\n                        .then((data) =>\n                            makeViolinTrace({\n                                name: \"pre\",\n                                x: data,\n                                y0: condition,\n                                legendgroup: \"pre\",\n                                side: \"positive\",\n                            })\n                        )\n                ),\n                ...conditions.map((condition) =>\n                    Promise.all(\n                        replicates\n                            .get(condition)\n                            .map((sample) =>\n                                worker.getData(\n                                    `LFQ intensity ${sample}`,\n                                    MSExperiment.SNAPSHOT_KEYS\n                                        .IMPUTE_MISSING_VALUES\n                                )\n                            )\n                    )\n                        .then((array) => array.flat())\n                        .then((data) =>\n                            makeViolinTrace({\n                                name: \"post\",\n                                x: data,\n                                y0: condition,\n                                legendgroup: \"post\",\n                                side: \"negative\",\n                            })\n                        )\n                ),\n            ]),\n            layout: {},\n        };\n    }\n\n    Object.assign(ret.layout, {\n        title: \"log2 intensities pre- and post-imputation\",\n        yaxis: {\n            automargin: true,\n        },\n    });\n    return ret;\n}\n\nasync function makePrePostImputationBoxplot({ samples, conditions }) {\n    const makeBoxplotTrace = (trace) => {\n        return Object.assign(trace, {\n            type: \"box\",\n        });\n    };\n\n    let ret = { data: [], layout: {} };\n    if (samples != undefined && conditions == undefined) {\n        ret = {\n            data: await Promise.all([\n                ...samples.map((sample) =>\n                    worker\n                        .getData(\n                            `LFQ intensity ${sample}`,\n                            MSExperiment.SNAPSHOT_KEYS.MEDIAN_NORMALIZATION\n                        )\n                        .then((data) =>\n                            makeBoxplotTrace({\n                                name: \"pre\",\n                                y: data,\n                                x0: sample,\n                                legendgroup: \"pre\",\n                            })\n                        )\n                ),\n                ...samples.map((sample) =>\n                    worker\n                        .getData(\n                            `LFQ intensity ${sample}`,\n                            MSExperiment.SNAPSHOT_KEYS.IMPUTE_MISSING_VALUES\n                        )\n                        .then((data) =>\n                            makeBoxplotTrace({\n                                name: \"post\",\n                                y: data,\n                                x0: sample,\n                                legendgroup: \"post\",\n                            })\n                        )\n                ),\n            ]),\n            layout: {},\n        };\n    } else if (samples == undefined && conditions != undefined) {\n        const replicates = await worker.getReplicates();\n        ret = {\n            data: await Promise.all([\n                ...conditions.map((condition) =>\n                    Promise.all(\n                        replicates\n                            .get(condition)\n                            .map((sample) =>\n                                worker.getData(\n                                    `LFQ intensity ${sample}`,\n                                    MSExperiment.SNAPSHOT_KEYS\n                                        .MEDIAN_NORMALIZATION\n                                )\n                            )\n                    )\n                        .then((array) => array.flat())\n                        .then((data) =>\n                            makeBoxplotTrace({\n                                name: \"pre\",\n                                y: data,\n                                x0: condition,\n                                legendgroup: \"pre\",\n                            })\n                        )\n                ),\n                ...conditions.map((condition) =>\n                    Promise.all(\n                        replicates\n                            .get(condition)\n                            .map((sample) =>\n                                worker.getData(\n                                    `LFQ intensity ${sample}`,\n                                    MSExperiment.SNAPSHOT_KEYS\n                                        .IMPUTE_MISSING_VALUES\n                                )\n                            )\n                    )\n                        .then((array) => array.flat())\n                        .then((data) =>\n                            makeBoxplotTrace({\n                                name: \"post\",\n                                y: data,\n                                x0: condition,\n                                legendgroup: \"post\",\n                            })\n                        )\n                ),\n            ]),\n            layout: {},\n        };\n    }\n\n    Object.assign(ret.layout, {\n        title: \"log2 intensities pre- and post-imputation\",\n        xaxis: {\n            automargin: true,\n        },\n        boxmode: \"group\",\n        boxgap: -1,\n        boxgroupgap: 0,\n    });\n    return ret;\n}\n\nasync function makeVolcanoPlot({ comparisons, highlightGenes }) {\n    if (!comparisons) return { data: [], layout: {} };\n    const highlightGeneSet = new Set(\n        (highlightGenes || []).map((g) => g.toLowerCase())\n    );\n    return {\n        data: [\n            await Promise.all([\n                worker.getComparisonData(comparisons, \"log FC\"),\n                worker.getComparisonData(comparisons, \"adjusted p value\"),\n                worker.getComparisonData(comparisons, \"gene\"),\n            ]).then(([logfc, pvalues, genes]) => {\n                return {\n                    type: \"scattergl\",\n                    mode: \"markers\",\n                    x: logfc,\n                    y: pvalues.map((p) => -1 * Math.log10(p)),\n                    hovertext: genes,\n                    marker: {\n                        color: genes.map((g) =>\n                            highlightGeneSet.has(g.toLowerCase()) ? 1 : 0\n                        ),\n                    },\n                };\n            }),\n        ],\n        layout: {\n            title: `${comparisons[1]} vs. ${comparisons[0]}`,\n        },\n    };\n}\n\nasync function makePValueHistogram({ comparisons }) {\n    if (!comparisons) return { data: [], layout: {} };\n    return {\n        data: [\n            {\n                type: \"histogram\",\n                x: await worker.getComparisonData(comparisons, \"p value\"),\n                opacity: 0.5,\n                xbins: {\n                    start: 0,\n                    end: 1,\n                    size: 0.025,\n                },\n            },\n            {\n                type: \"histogram\",\n                x: await worker.getComparisonData(\n                    comparisons,\n                    \"adjusted p value\"\n                ),\n                opacity: 0.5,\n                xbins: {\n                    start: 0,\n                    end: 1,\n                    size: 0.025,\n                },\n            },\n        ],\n        layout: {\n            title: `${comparisons[1]} vs. ${comparisons[0]} p values`,\n            barmode: \"overlay\",\n        },\n    };\n}\n","import React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport { connect } from \"react-redux\";\nimport { makePlotlyDataLayout } from \"../Figures\";\n\nfunction MainPanelContainer({ id, figureOptions }) {\n    const [plot, setPlot] = React.useState({\n        data: [],\n        layout: {\n            autosize: true,\n        },\n    });\n\n    React.useEffect(async () => {\n        if (figureOptions) setPlot(await makePlotlyDataLayout(figureOptions));\n    }, [figureOptions]);\n\n    if (plot) {\n        return (\n            <div id={id} className=\"main-container\">\n                <Plot\n                    className=\"main-plot\"\n                    data={plot.data}\n                    layout={plot.layout}\n                    useResizeHandler\n                    style={{\n                        width: \"100%\",\n                        height: \"100%\",\n                    }}\n                />\n            </div>\n        );\n    }\n    return \"loading...\";\n}\n\nexport default connect((state) => {\n    return {\n        figureOptions: state.view.figureOptions,\n    };\n}, null)(MainPanelContainer);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport worker from \"../AnalysisWorker\";\n\nimport MUIDataTable from \"mui-datatables\";\n\nfunction SidePanelContainer({ id, samples, figureOptions }) {\n    const [data, setData] = React.useState();\n\n    React.useEffect(async () => {\n        if (figureOptions.comparisons)\n            setData(\n                await worker.getComparisonsTable(figureOptions.comparisons)\n            );\n    }, [figureOptions.comparisons]);\n\n    return (\n        <div id={id}>\n            <MUIDataTable\n                title={\n                    figureOptions.comparisons\n                        ? `${figureOptions.comparisons[1]} vs. ${figureOptions.comparisons[0]}`\n                        : \"no data: make and select a comparison\"\n                }\n                data={data}\n                columns={data ? Object.keys(data[0]) : []}\n                options={{\n                    selectableRows: \"none\",\n                }}\n            />\n        </div>\n    );\n}\n\nexport default connect((state) => {\n    return {\n        figureOptions: state.view.figureOptions,\n    };\n}, null)(SidePanelContainer);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FIGURES } from \"../Figures\";\n\nimport \"./FigureOptions.css\";\n\nfunction FigureOptions({\n    samples,\n    conditions,\n    comparisons,\n    figureType,\n    onOptionsChange,\n}) {\n    const [sampleCondition, setSampleCondition] = React.useState(\"samples\");\n\n    let options;\n    switch (figureType) {\n        case FIGURES.PRE_POST_IMPUTATION_VIOLIN:\n        case FIGURES.PRE_POST_IMPUTATION_BOXPLOT:\n            const onFigureTypeChange = (e) => {\n                setSampleCondition(e.currentTarget.value);\n                onOptionsChange({\n                    samples: undefined,\n                    conditions: undefined,\n                });\n            };\n\n            options = (\n                <>\n                    <div>\n                        <input\n                            type=\"radio\"\n                            id=\"figureTypeSamples\"\n                            name=\"figureType\"\n                            value=\"samples\"\n                            checked={sampleCondition === \"samples\"}\n                            onChange={onFigureTypeChange}\n                        />\n                        <label htmlFor=\"figureTypeSamples\">Samples</label>\n                        <br />\n                        <input\n                            type=\"radio\"\n                            id=\"figureTypeConditions\"\n                            name=\"figureType\"\n                            value=\"conditions\"\n                            checked={sampleCondition === \"conditions\"}\n                            onChange={onFigureTypeChange}\n                        />\n                        <label htmlFor=\"figureTypeConditions\">Conditions</label>\n                    </div>\n                    <select\n                        multiple\n                        onChange={(e) => {\n                            onOptionsChange({\n                                [sampleCondition]: Array.from(\n                                    e.target.selectedOptions\n                                ).map((opt) => opt.value),\n                            });\n                        }}\n                    >\n                        {{ samples, conditions }[sampleCondition].map(\n                            (name) => (\n                                <option value={name} key={name}>\n                                    {name}\n                                </option>\n                            )\n                        )}\n                    </select>\n                </>\n            );\n            break;\n        case FIGURES.VOLCANO:\n        case FIGURES.P_VALUE_HISTOGRAM:\n            options = (\n                <>\n                    <select\n                        multiple\n                        onChange={(e) => {\n                            onOptionsChange({\n                                comparisons: JSON.parse(e.target.value),\n                            });\n                        }}\n                    >\n                        {Object.entries(comparisons || {})\n                            .map(([conditionA, value]) =>\n                                value.map((conditionB) => (\n                                    <option\n                                        value={JSON.stringify([\n                                            conditionA,\n                                            conditionB,\n                                        ])}\n                                        key={JSON.stringify([\n                                            conditionA,\n                                            conditionB,\n                                        ])}\n                                    >\n                                        {conditionB} vs. {conditionA}\n                                    </option>\n                                ))\n                            )\n                            .flat()}\n                    </select>\n                    <textarea\n                        onChange={(e) =>\n                            onOptionsChange({\n                                highlightGenes: e.target.value\n                                    .split(\"\\n\")\n                                    .filter((g) => g !== \"\"),\n                            })\n                        }\n                    ></textarea>\n                </>\n            );\n            break;\n    }\n\n    return <div className=\"figure-sample-condition-selector\">{options}</div>;\n}\n\nexport default connect((state) => {\n    return {\n        samples: state.input.samples,\n        conditions: state.input.conditions,\n        comparisons: state.input.comparisons,\n    };\n}, null)(FigureOptions);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FIGURES } from \"../Figures\";\nimport { downloadData } from \"../RunAnalysis\";\nimport { ACTIONS, createAction } from \"../store/actions\";\n\nimport FigureOptions from \"./FigureOptions\";\n\nimport \"./ViewContainer.css\";\n\nfunction ViewContainer({ id, onOptionsSet, onDownloadClick }) {\n    const [figureOptions, setFigureOptions] = React.useState({});\n\n    return (\n        <div id={id} className=\"main-figure-options\">\n            {/* select figure type */}\n            <select\n                onChange={(e) => {\n                    setFigureOptions(\n                        Object.assign({}, figureOptions, {\n                            type: e.target.value,\n                        })\n                    );\n                }}\n                defaultValue=\"default\"\n            >\n                {[\n                    <option disabled value=\"default\" key=\"default\">\n                        -- select an option --\n                    </option>,\n                    ...Object.keys(FIGURES).map((fig) => (\n                        <option value={fig} key={fig}>\n                            {fig}\n                        </option>\n                    )),\n                ]}\n            </select>\n\n            {/* select figure options */}\n            <FigureOptions\n                figureType={figureOptions.type}\n                onOptionsChange={(changedOptions) =>\n                    setFigureOptions(\n                        Object.assign({}, figureOptions, changedOptions)\n                    )\n                }\n            />\n\n            {/* set options */}\n            <button onClick={() => onOptionsSet(figureOptions)}>\n                View data\n            </button>\n\n            <button onClick={onDownloadClick}>Download data</button>\n        </div>\n    );\n}\n\nexport default connect(null, (dispatch) => {\n    return {\n        onOptionsSet: (figureOptions) => {\n            dispatch(\n                createAction(ACTIONS.SET_VIEW_FIGURE_OPTIONS, figureOptions)\n            );\n        },\n        onDownloadClick: () => {\n            dispatch(downloadData());\n        },\n    };\n})(ViewContainer);\n","import \"./App.css\";\nimport InputContainer from \"./InputContainer\";\nimport MainPanelContainer from \"./MainPanelContainer\";\nimport SidePanelContainer from \"./SidePanelContainer\";\nimport ViewContainer from \"./ViewContainer.js\";\n\nfunction App() {\n    return (\n        <div id=\"app-container\">\n            <InputContainer id=\"input-container\" />\n            <ViewContainer id=\"view-container\" />\n            <SidePanelContainer id=\"sidepanel-container\" />\n            <MainPanelContainer id=\"mainpanel-container\" />\n        </div>\n    );\n}\n\nexport default App;\n","import { applyMiddleware, createStore, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { ACTIONS } from \"./actions\";\n\nconst initialState = {\n    input: {\n        samples: [],\n        conditions: [],\n    },\n    view: {\n        figureOptions: {},\n    },\n    side: {},\n    main: {},\n};\n\nfunction inputReducer(state, action) {\n    switch (action.type) {\n        case ACTIONS.SET_INPUT_SAMPLES:\n            return Object.assign({}, state, {\n                samples: action.data,\n            });\n        case ACTIONS.SET_INPUT_CONDITIONS:\n            return Object.assign({}, state, {\n                conditions: action.data,\n            });\n        case ACTIONS.SET_INPUT_COMPARISONS:\n            return Object.assign({}, state, {\n                comparisons: action.data,\n            });\n    }\n    return state;\n}\n\nfunction viewReducer(state, action) {\n    switch (action.type) {\n        case ACTIONS.SET_VIEW_FIGURE_OPTIONS:\n            return Object.assign({}, state, {\n                figureOptions: action.data,\n            });\n    }\n    return state;\n}\n\nfunction rootReducer(state = initialState, action) {\n    const cpy = { ...state };\n    switch (action.type) {\n        case ACTIONS.SET_INPUT_SAMPLES:\n        case ACTIONS.SET_INPUT_CONDITIONS:\n        case ACTIONS.SET_INPUT_COMPARISONS:\n            cpy.input = inputReducer(state.input, action);\n            break;\n        case ACTIONS.SET_VIEW_FIGURE_OPTIONS:\n            cpy.view = viewReducer(state.view, action);\n            break;\n    }\n    return cpy;\n}\n\nconst composeEnhancers =\n    (typeof window !== \"undefined\" &&\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n    compose;\n\nexport default createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(thunk))\n);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport store from \"./store/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n"],"sourceRoot":""}